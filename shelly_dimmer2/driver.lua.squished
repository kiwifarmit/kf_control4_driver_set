package.preload['SKC4.licence.cloud_client_v1007'] = (function (...)
-- Please put here the cloud client code as provided by DriverCentral.
return {} end)
package.preload['SKC4.Utility'] = (function (...)
local Utility = {}


function Utility.PersistGetValue(id)
	if (C4.PersistGetValue) then
		return C4:PersistGetValue(id)
	else
		return PersistData[id]
	end
end

function Utility.PersistSetValue(id,value)
	if (C4.PersistSetValue) then
		C4:PersistSetValue(id,value)
	else
		PersistData[id]=value
	end
end

function Utility.callAllFunctionsInTable(tbl, param)
	ret_err = {}
	ret_status = true
	for k,v in pairs(tbl) do
		if (tbl[k] ~= nil and type(tbl[k]) == "function") then
			-- 
			if (SKC4_LOGGER ~= nil and type(SKC4_LOGGER) == "table") then
				SKC4_LOGGER:debug("Calling  ", k, "()")
			end
			local status, err = pcall(tbl[k], param)
			if (not status) then
				ret_err[k] = {status=status, err=err}
			end
		end
	end
	return ret_status, ret_err
end

--remove the first element of a list
function Utility.remove(tbl, index)
	if (index == nil ) then index = 1 end
	local a = {}
	--local b = {}
	--local c
	for n,v in pairs(tbl) do 
		table.insert(a, n) 
	end
	table.sort(a)
	local f = nil
	local o = {}
	for i, t in pairs(a) do
		if (f == nil) then 
			f = tbl[t]
		else
			table.insert(o, tbl[t])
		end
	end
	 --Utility.tprint(b)
	return o, f
end

function Utility.tprint (tbl, indent)  --print table
	if type(tbl) == "table" then
		if not indent then indent = 0 end
		for k, v in pairs(tbl) do
			formatting = string.rep("   ", indent) .. k .. ": "
			if type(v) == "table" then
				print(formatting)
				Utility.tprint(v, indent+1)
			else
				print(formatting .. tostring(v, indent))
			end
		end
	else
		print (tbl)
	end
end

function Utility.tstring (tbl, indent) -- transform table in string, nested
	--ritorna una stringa contenente i valori della table
    --if indent is -1 return a table in one line string
	local  mytable = ""
	if indent == nil then indent = 0 end
	if (type(tbl) == "table") then
		if (indent == -1) then 
			for k,v in pairs(tbl) do
				if type(v) == "table" then
					mytable = mytable .. " "..Utility.tstring(v, -1)
				else
					mytable = mytable ..k.. " " .. tostring(v) 
				end
			end
		elseif(type(indent) == "number") then
			for k, v in pairs(tbl) do
				formatting = string.rep("   ", indent) .. k .. " : "
				if type(v) == "table" then
					mytable = mytable .. "\n"..formatting
					mytable = mytable .."\n"..Utility.tstring(v, indent+1)
				else
					mytable = mytable .. formatting .. tostring(v) .." \n"
				end
			end
		elseif(type(indent) == "string") then
			for k, v in pairs(tbl) do
				--formatting = string.rep("   ", indent) .. k .. " : "
				if type(v) == "table" then
					formatting = indent .. k
					mytable = mytable .. formatting
					mytable = mytable .. Utility.tstring(v, indent)
				else
					mytable = mytable ..indent .. tostring(v)
				end
				
			end
			mytable = mytable .."\n"
		end
	else 
		mytable = tbl
	end
	return mytable
end



--get the "very" first element of a Table... let's lua, not only if is key is a number like getn
function Utility.getFirstId(T)
	if (T == nil) then
		return {}
	else  
		local n  = 1
		local f
		for k, v in pairs(T) do
			if n == 1 then f = k end
		end
		return f
	end
end

function Utility.tableLength(T)
	local count = 0
	for _ in pairs(T) do count = count + 1 end
	return count
  end

--take "str" (string) and slpit it by "inSplitPattern" returning a table of the substring splitted in "outResults"(optional)
function Utility.split(str, inSplitPattern, outResults ) 
    if not outResults then
		outResults = {}
	end
	local theStart = 1
	local theSplitStart, theSplitEnd = string.find( str, inSplitPattern, theStart )
	while theSplitStart do
		table.insert( outResults, string.sub( str, theStart, theSplitStart-1 ) )
		theStart = theSplitEnd + 1
		theSplitStart, theSplitEnd = string.find( str, inSplitPattern, theStart )
	end
	table.insert( outResults, string.sub( str, theStart ) )
	return outResults
end


function Utility.Avg_DevStd(value, stddev, avg, n)
    local delta = value - avg
    n = n+1
    avg = avg + delta / n 
    stddev = math.sqrt(((stddev*stddev * (n-1)) + delta*(value - avg))/n)
    return stddev, avg, n 
end

-- Private members
function pairsByKeys (t, f)
	local a = {}
	for n in pairs(t) do table.insert(a, n) end
	table.sort(a, f)
	local i = 0      -- iterator variable
	local iter = function ()   -- iterator function
	  i = i + 1
	  if a[i] == nil then return nil
	  else return a[i], t[a[i]]
	  end
	end
	return iter
end

function Utility.get_key_by_subtable_key_value(father_table, subtable_key, subtable_value)
	if type(father_table) == "table" then
	  for key, subtable in ipairs(father_table) do
		if type(subtable) == "table" then
		  if subtable[tostring(subtable_key)] == subtable_value then
			return key
		  end
		end
	  end
	else
	  print("father_table is not a table")
	end
  end
function Utility.map_value(value, old_max, old_min, new_max, new_min)
	local old_range = old_max - old_min
	local new_range = new_max - new_min
	return ((value - old_min) * (new_range - old_range)) + new_min
end

function Utility.tonumber_loc(str, base)
	if (type(str)=="string") then
		local s = str:gsub(",", ".") -- Assume US Locale decimal separator
		local num = tonumber(s, base)
		if (num == nil) then
			s = str:gsub("%.", ",") -- Non-US Locale decimal separator
			num = tonumber(s, base)
		end
		return num
	else
		return tonumber(str)
	end
	
end

return Utility



 end)
package.preload['SKC4.Logger'] = (function (...)
-- Modulo per gestire i file di log

local Logger = {}

Utility = require "SKC4.Utility"

function Logger:new (o)
    o = o or {}
    setmetatable(o, self)
    self.__index = self
    self.logLevels = {
        ["FATAL"] = "F",
        ["ERROR"] = "EF",
        ["INFO"] = "IEF",
        ["WARN"] = "WIEF",
        ["TRACE"] = "WIEFT",
        ["DEBUG"] = "DWIETF",
        ["ONLY_INFO"] = "I",
        ["ONLY_WARN"] = "W",
        ["ONLY_ERROR"] = "E",
        ["ONLY_FATAL"] = "F",
        ["ONLY_TRACE"] = "T",
        ["ONLY_DEBUG"] = "D",
        ["NONE"] = "-",
        ["ALL"]  = "IWEFDT",
      }
      
    self._DEFAULT_OUTPUT_FORMAT     = "%s [%s] -- %s\n"
    self._DEFAULT_FILE_NAME_FORMAT  = "%s_%s.log"    
    self._DEFAULT_DATE_FORMAT       = "%Y%m%d%H%M%S"

    self._DEFAULT_FILE_POINTER      = io.stdio
    self._DEFAULT_FILE_NAME         = nil
    self._DEFAULT_FILE_PATH         = nil 
    self._DEFAULT_MAX_FILES         = 0
    
    self._currentMaxNumberOfFIles   = self._DEFAULT_MAX_FILES
    self._currentFilePointer        = self._DEFAULT_FILE_POINTER
    self._currentFilePath           = self._DEFAULT_FILE_PATH
    self._currentFileName           = self._DEFAULT_FILE_NAME
    self._currentLogLevel           = self.logLevels.INFO
    self._currentOutputFormat       = self._DEFAULT_OUTPUT_FORMAT
    self._currentFileNameFormat     = self._DEFAULT_FILE_NAME_FORMAT
    self._currentLogMaxSize         = 2097152 -- 2MB

    self._write_on_c4_logfile       = false
    return o
end

function Logger:findLevelKey(level)
  for k,v in pairs(self.logLevels) do
    if (v == level) then
      return k
    end
  end
  return nil
end

function Logger:write(message)
    
    if (self._currentFilePointer ~= nil and self._currentFilePointer ~= self._DEFAULT_FILE_POINTER) then
        self:rotate()
        C4:FileWrite(self._currentFilePointer,message:len(), message)
    end

    if self:isC4FileLoggingEnabled() then
        C4:DebugLog(message) -- print out on Director log files

        if ( self:isLogLevelEnabled(self.logLevels.ONLY_ERROR) or self:isLogLevelEnabled(self.logLevels.ONLY_FATAL) ) then
            C4:ErrorLog(message) 
        end 
    end
    
    print(message)    -- print out on Composer Lua Tab
    
    return message
end

function Logger:formattedWrite(level, ...)

    local arg = {...}
    local n=#arg
    local fullLevel = self:findLevelKey(level)
    local info = debug.getinfo(3,'nlS') or { source = "unknown", currentline = "unknown", what = "unknown" }

    local message = ""
    
    -- convert all params into strings
    -- starting from second argument
    --for a,b in pairs(arg) do 
    --    print(a,b)
    --end
    for index = 1, n do
        local val = arg[index]
    
        if (message.length == 0) then
            message = self:convertToString(val)
        else
            message = message .." "..self:convertToString(val)
        end
    end
    -- "%s %s:%s -- %s\n"
    local outString = string.format(self._currentOutputFormat,
        fullLevel,
        info.currentline,
        message)
    return self:write(outString)
end

function Logger:convertToString(obj)
    
    if (type(obj) == "table") then
        return Utility.tstring(obj, 0)
    else
        return tostring(obj)
    end
end

function Logger:setLogLevel(level)
  local flag = true
  
  for x in level:gfind(".") do
    key = self:findLevelKey(x)
    self._currentLogLevel = self.logLevels.NONE;
    if (self.logLevels[key] == nil) then flag = false; break; end
  end
  if ( flag == true ) then
      self._currentLogLevel = level
  end

end

function Logger:getLogLevel(level)
    return self._currentLogLevel;
end

function Logger:isLogLevelEnabled(level)
  return (self._currentLogLevel:find(level) ~= nil) 
end

function Logger:isLoggingEnabled()
    return not self:isLogLevelEnabled(self.logLevels.NONE)
end

function Logger:disableLogging()
    self:setLogLevel(self.logLevels.NONE)
end

function Logger:enableInfoLevel()
    self:setLogLevel(self.logLevels.INFO)
end

function Logger:enableWarningLevel()
    self:setLogLevel(self.logLevels.WARN)
end

function Logger:enableErrorLevel()
    self:setLogLevel(self.logLevels.ERROR)
end

function Logger:enableFatalLevel()
    self:setLogLevel(self.logLevels.FATAL)
end

function Logger:enableTraceLevel()
    self:setLogLevel(self.logLevels.TRACE)
end

function Logger:enableDebugLevel()
    self:setLogLevel(self.logLevels.DEBUG)
end
function Logger:enableC4FileLogging()
    self._write_on_c4_logfile = true
end

function Logger:disableC4FileLogging()
    self._write_on_c4_logfile = false
end

function Logger:isC4FileLoggingEnabled()
    return self._write_on_c4_logfile
end

function Logger:open(filePath, fileName)
  self._currentFilePath = filePath
  self._currentFileName = fileName 
  
  C4:FileSetDir(self._currentFilePath)  --move in file path folder

  logFileName = string.format(self._currentFileNameFormat, fileName, os.date(self._DEFAULT_DATE_FORMAT));
  -- Open the file
  self._currentFilePointer = C4:FileOpen(logFileName)
  local pos = C4:FileGetSize(self._currentFilePointer)
  C4:FileSetPos(self._currentFilePointer, pos)

  C4:FileSetDir('/')
  return self._currentFilePointer, logFileName
end

function Logger:close()
    -- only if a file is open
  if (self._currentFilePointer ~= self._DEFAULT_FILE_POINTER) then
    
    -- Close the file
    if (self._currentFilePointer ~= nil) then
        C4:FileClose(self._currentFilePointer)
        --self._currentFilePointer:close()
        self._currentFilePointer = self._DEFAULT_FILE_POINTER
        self._currentFilePath = nil
        self._currentFileName = nil
    end
  end
end

function Logger:info(...)
    if (self:isLogLevelEnabled(self.logLevels.ONLY_INFO)) then
        return self:formattedWrite(self.logLevels.INFO, ...);
    end 
end

function Logger:warn(...)
    if (self:isLogLevelEnabled(self.logLevels.ONLY_WARN)) then
        return self:formattedWrite(self.logLevels.WARN, ...);
    end 
end

function Logger:error(...)
    if (self:isLogLevelEnabled(self.logLevels.ONLY_ERROR)) then
        return self:formattedWrite(self.logLevels.ERROR, ...);
    end 
end

function Logger:fatal(...)
    if (self:isLogLevelEnabled(self.logLevels.ONLY_FATAL)) then
        return self:formattedWrite(self.logLevels.FATAL, ...);
    end 
end

function Logger:trace(...)
    if (self:isLogLevelEnabled(self.logLevels.ONLY_TRACE)) then
        return self:formattedWrite(self.logLevels.TRACE, ...);
    end 
end

function Logger:debug(...)
    if (self:isLogLevelEnabled(self.logLevels.ONLY_DEBUG)) then
        return self:formattedWrite(self.logLevels.DEBUG, ...);
    end 
end

function Logger:setMaxLogSize( size )
  self._currentLogMaxSize = size
end

function Logger:setMaxLoggersNumber( number )
    self._currentMaxNumberOfFIles = number
  end

function Logger:getMaxLogSize()
  return self._currentLogMaxSize
end

function Logger:getFilePointer()
    return self._currentFilePointer
end

function Logger:getFilePath()
    return self._currentFilePath
end

function Logger:getFileName()
    return self._currentFileName
end

function Logger:rotate(force)
    if (self._currentFilePointer ~= self._DEFAULT_FILE_POINTER) then
        local fileSize = C4:FileGetSize(self._currentFilePointer)
        
        if (self._currentMaxNumberOfFIles ~= self._DEFAULT_MAX_FILES) then 
            local loggersNumber = self:getLoggersNumber()
            print ("loggersNumber", loggersNumber)
            while (loggersNumber >= self._currentMaxNumberOfFIles) do
                print ("loggersNumber >= self._currentMaxNumberOfFIles",loggersNumber >= self._currentMaxNumberOfFIles)
                self:removeFirst()
                loggersNumber = self:getLoggersNumber()
            end
        end
        if (force ~= nil or tonumber(fileSize) > self._currentLogMaxSize) then
            local oldPath = self._currentFilePath -- store old value 'cause close() clear _currentFilePath
            local oldName = self._currentFileName -- store old value 'cause close() clear _currentFileName
            self:close() 
            return self:open(oldPath,oldName)
        else
            return self._currentFilePointer, self._currentFilePath, self._currentFileName
        end
    end
end

--private
function Logger:getLoggersNumber()    
    C4:FileSetDir(self._currentFilePath)
    local loggerList = C4:FileList()
    local count = 0
    for k,v in pairs(loggerList) do
        ----print (k,v) 
        if (string.match(v, self._currentFileName)) then 
            ----print (string.match(v, self._currentFileName))
            count = count + 1 
        end
    end
    C4:FileSetDir("/")
    return count 
end

function Logger:removeFirst()    
    C4:FileSetDir(self._currentFilePath)
    local loggerList = C4:FileList()
    local count = 0
    ----------------20171204114408
    local minimum = 30000000000000
    local fileToRemove = ""
    for k,v in pairs(loggerList) do 
        if (string.match(v, self._currentFileName)) then 
            ----print (string.match(v, self._currentFileName))
            local n = tonumber(string.match (v, "(%d+)"))
            ----print ("n:  ", n)
            ----print ("file:  ", v)
            if ( n < minimum ) then 
                minimum = n
                fileToRemove = v 
            end
        end
    end

    ----print (fileToRemove, minimum)
    if (fileToRemove ~= "") then  
        print("deleting logger :",fileToRemove)
        C4:FileDelete(fileToRemove) 
    end
    C4:FileSetDir("/")
    return count 
end

SKC4_LOGGER = SKC4_LOGGER or Logger:new()

return Logger;

 end)
package.preload['SKC4.TimerManager'] = (function (...)
--C4 = require 'SKC4.C4' -- if we are not in C4 env, I'll emulate it
local TimerManager = {}


function TimerManager:new (interval_delay, time_unit, on_expire_callback, will_repeat, o)
    o = o or {}
    setmetatable(o, self)
    self.__index = self

    self.interval_delay = interval_delay
    self.callback = on_expire_callback
    self.will_repeat = will_repeat or false
    self.timerObj = nil
    self.created_at = os.time(os.date('!*t'))
    self.started_at = nil
    -- , SECONDS, MINUTES and HOURS
    if (string.upper(time_unit) == "SECONDS") then
        self.time_unit = 1000
    elseif (string.upper(time_unit) == "MINUTES") then
        self.time_unit = 60*1000
    elseif (string.upper(time_unit) == "HOURS") then
        self.time_unit = 60*60*1000
    else
        self.time_unit = 1
    end 
    return o
end

function TimerManager:start()
    if (self.timerObj) then
        self:stop()
    end
    self.started_at = os.time(os.date('!*t'))
    self.timerObj = C4:SetTimer(self.interval_delay * self.time_unit, self.callback, self.will_repeat)
end

function TimerManager:stop()
    if (self.timerObj) then
        --self.timerObj = C4:KillTimer(self.timerObj)
        self.timerObj:Cancel()
        self.timerObj = nil
        self.started_at = nil
    end
end

--
-- Setter and Getter
--


--
-- Private functions
--


return TimerManager
 end)
package.preload['SKC4.LicenseManager'] = (function (...)
local TimerManager = require "SKC4.TimerManager"
local Logger = require "SKC4.Logger"
local Utility = require("SKC4.Utility")

local LicenseManager = {}

-- global var required by DriverCentral
DC_PID = 0 -- Product ID
DC_FD = false -- DriverCentral (Driver is not a free driver)
DC_FILENAME = "" -- "my_driver.c4z"

LicenseManager.TRIAL_NOT_STARTED = -1
LicenseManager.TRIAL_STARTED = 1
LicenseManager.TRIAL_EXPIRED = 0

function LicenseManager:new(o)
    o = o or {}
    setmetatable(o, self)
    self.__index = self
    self.currentVendorId = "DRIVERCENTRAL"
    self.statusMessage = ""
    self.vendorData = {
        DRIVERCENTRAL 	= { 
            ProductId 	= 000, -- Product ID
            FreeDriver 	= false, -- (Driver is not a free driver)
            FileName    = ""
        },
        HOUSELOGIX		= { 
            LicenseCode = "",
            ProductId 	= 000,
            ValidityCheckInterval = 60,
            TrialExpiredLapse = 10,
            Licensed = false,
            Trial = LicenseManager.TRIAL_NOT_STARTED,  -- -1 not started, 1 started , 0 expired  -- only one possibility to stard it
            Version = ""
        },
        SOFTKIWI 	= { 
            LicenseCode = "",
            Licensed = false
        },
    }

    self.houselogixTimerCheck = {}
    self.houselogixTimerTrial = {}    

    self.OnPropertyChangedTable = {}
    self.OnPropertyChangedTable["License Provider"]        = LicenseManager.SKC4_ON_PROPERTY_CHANGED_LicenseProvider
    self.OnPropertyChangedTable["Houselogix License Code"] = LicenseManager.SKC4_ON_PROPERTY_CHANGED_HouselogixLicenseCode
    self.OnPropertyChangedTable["SoftKiwi License Code"]   = LicenseManager.SKC4_ON_PROPERTY_CHANGED_SoftKiwiLicenseCode

    
    return o
end

--
-- Setter and Getter
--


function LicenseManager:setStatusMessage( message )
    self.statusMessage = message
    if self:getCurrentVendorId() == "DRIVERCENTRAL" then
        C4:UpdateProperty ('Houselogix License Status', "")
        C4:UpdateProperty ('SoftKiwi License Status', "")
    elseif self:getCurrentVendorId() == "HOUSELOGIX" then
        C4:UpdateProperty ('Houselogix License Status', message)
        C4:UpdateProperty ('SoftKiwi License Status', "")
    elseif self:getCurrentVendorId() == "SOFTKIWI" then
        C4:UpdateProperty ('Houselogix License Status', "")
        C4:UpdateProperty ('SoftKiwi License Status', message)
    else
        C4:UpdateProperty ('Houselogix License Status', "")
        C4:UpdateProperty ('SoftKiwi License Status', "")
    end
end

function LicenseManager:getStatusMessage()
    return self.statusMessage
end

function LicenseManager:setCurrentVendorId(vendor_id)
    self.currentVendorId = vendor_id
    
    if vendor_id == "DRIVERCENTRAL" then
        SKC4_LOGGER:info("DRIVERCENTRAL vendor setted")
        C4:SetPropertyAttribs("Cloud Status", 0)
        C4:SetPropertyAttribs("Automatic Updates", 0)
        C4:SetPropertyAttribs("Houselogix License Code", 1)
        C4:SetPropertyAttribs("Houselogix License Status", 1)
        C4:SetPropertyAttribs("SoftKiwi License Code", 1)
        C4:SetPropertyAttribs("SoftKiwi License Status", 1)
        C4:SetPropertyAttribs("SoftKiwi Driver Type", 1)
        
    elseif vendor_id == "HOUSELOGIX" then
        SKC4_LOGGER:info("HOUSELOGIX vendor setted")
        C4:SetPropertyAttribs("Cloud Status", 1)
        C4:SetPropertyAttribs("Automatic Updates", 1)
        C4:SetPropertyAttribs("Houselogix License Code", 0)
        C4:SetPropertyAttribs("Houselogix License Status", 0)
        C4:SetPropertyAttribs("SoftKiwi License Code", 1)
        C4:SetPropertyAttribs("SoftKiwi License Status", 1)
        C4:SetPropertyAttribs("SoftKiwi Driver Type", 1)
        
    elseif vendor_id == "SOFTKIWI" then
        SKC4_LOGGER:info("SOFTKIWI vendor setted")
        C4:SetPropertyAttribs("Cloud Status", 1)
        C4:SetPropertyAttribs("Automatic Updates", 1)
        C4:SetPropertyAttribs("Houselogix License Code", 1)
        C4:SetPropertyAttribs("Houselogix License Status", 1)
        C4:SetPropertyAttribs("SoftKiwi License Code", 0)
        C4:SetPropertyAttribs("SoftKiwi License Status", 0)
        C4:SetPropertyAttribs("SoftKiwi Driver Type", 0)
        
    else
        SKC4_LOGGER:info("UNKNOW vendor setted")
        C4:SetPropertyAttribs("Cloud Status", 1)
        C4:SetPropertyAttribs("Automatic Updates", 1)
        C4:SetPropertyAttribs("Houselogix License Code", 1)
        C4:SetPropertyAttribs("Houselogix License Status", 1)
        C4:SetPropertyAttribs("SoftKiwi License Code", 1)
        C4:SetPropertyAttribs("SoftKiwi License Status", 1)
        C4:SetPropertyAttribs("SoftKiwi Driver Type", 1)
        
    end

    self.updatePersistData()

end
function LicenseManager:getCurrentVendorId()
    return self.currentVendorId
end

function LicenseManager:getCurrentVendorName()
    local id = self:getCurrentVendorId()

    if (id == "DRIVERCENTRAL") then
        return "Driver Central"
    elseif (id == "HOUSELOGIX") then
        return "Houselogix"
    elseif (id == "SOFTKIWI") then
        return "SoftKiwi"
    else
        return "Unknown"
    end
end
function LicenseManager:setCurrentVendorIdByName(value)
    if (value == "Driver Central") then
        self:setCurrentVendorId("DRIVERCENTRAL")
    elseif (value == "Houselogix") then
        self:setCurrentVendorId("HOUSELOGIX")
        self:trialTimerHandlerHouselogix()
    elseif (value == "SoftKiwi") then
        self:setCurrentVendorId("SOFTKIWI")
    end
end

function LicenseManager:setParamValue(param_key, param_value, vendor_id)

    if (vendor_id) then
        SKC4_LOGGER:debug("LicenseManager:setParamValue", "with vendor_id:", vendor_id)
        self.vendorData[vendor_id][param_key] = param_value
    else
        SKC4_LOGGER:debug("LicenseManager:setParamValue", "with automagic:", vendor_id)
        local autoVendorId = self:getCurrentVendorId()
        self.vendorData[autoVendorId][param_key] = param_value
    end
    self.updatePersistData()
    

end
function LicenseManager:getParamValue(param_key, vendor_id)
    if (vendor_id) then
        return self.vendorData[vendor_id][param_key]
    else
        return self.vendorData[self:getCurrentVendorId()][param_key]
    end
end

--
-- Functions to test licence validity
--
function LicenseManager:isLicenseActive()
    if self:getCurrentVendorId() == "DRIVERCENTRAL" then
        return (DC.X == 1)
    elseif self:getCurrentVendorId() == "HOUSELOGIX" then
        return self:getParamValue("Licensed", "HOUSELOGIX")
    elseif self:getCurrentVendorId() == "SOFTKIWI" then
        return self:getParamValue("Licensed", "SOFTKIWI")
    else
        return false
    end
end
function LicenseManager:isLicenseTrial()
    if self:getCurrentVendorId() == "DRIVERCENTRAL" then
        return (DC.X < 0)
    elseif self:getCurrentVendorId() == "HOUSELOGIX" then
        return self:getParamValue("Trial", "HOUSELOGIX")
    else
        return false
    end
end

function LicenseManager:isLicenseActiveOrTrial()
    return self:isLicenseActive() or self:isLicenseTrial()
end

function LicenseManager:isAbleToWork()
	if self:getCurrentVendorId() == "DRIVERCENTRAL" then
		local lic = self:isLicenseActive()
		local trial = self:isLicenseTrial()
		return lic or trial
	elseif self:getCurrentVendorId() == "HOUSELOGIX" then
		local lic = self:isLicenseActive()
		local trial = self:isLicenseTrial() == 1
        return lic or trial
    elseif self:getCurrentVendorId() == "SOFTKIWI" then
		local lic = self:isLicenseActive()
		return lic --or trial
	end
end


function LicenseManager:restoreFromPersistData()
    LICENSE_MGR.vendorData = Utility.PersistGetValue("vendorData") or LICENSE_MGR.vendorData
    LICENSE_MGR.currentVendorId = Utility.PersistGetValue("currentVendorId") or LICENSE_MGR.currentVendorId
    
    SKC4_LOGGER:debug("LicenseManager:restoreFromPersistData", "currentVendorId:", self.currentVendorId)
end

function LicenseManager:updatePersistData()
    SKC4_LOGGER:debug("LicenseManager:updatePersistData")
    Utility.PersistSetValue("vendorData", LICENSE_MGR.vendorData)
    Utility.PersistSetValue("currentVendorId", LICENSE_MGR.currentVendorId)
end


--
-- C4 Enviroment hooks
--

function LicenseManager:OnDriverInit()
    SKC4_LOGGER:debug("LicenseManager:OnDriverInit")
    
    self:OnDriverInit_DriverCentral()    
    self:OnDriverInit_HouseLogix()
    self:OnDriverInit_SoftKiwi()

    C4:SetPropertyAttribs("Cloud Status", 1)
    C4:SetPropertyAttribs("Automatic Updates", 1)
    C4:SetPropertyAttribs("Houselogix License Code", 1)
    C4:SetPropertyAttribs("Houselogix License Status", 1)
    C4:SetPropertyAttribs("SoftKiwi License Code", 1)
    C4:SetPropertyAttribs("SoftKiwi License Status", 1)
    C4:SetPropertyAttribs("SoftKiwi Driver Type", 1)

    --for k,v in pairs(Properties) do
	--	C4:ErrorLog("INIT_CODE: Calling OnPropertyChanged - " .. k .. ": " .. v)
	--	local status, err = pcall(OnPropertyChanged, k)
	--	if (not status) then
	--		C4:ErrorLog("LUA_ERROR: " .. err)
	--	end
	--end
    
end

function LicenseManager:OnDriverLateInit()
    SKC4_LOGGER:debug("LicenseManager:OnDriverLateInit")
    
    self:restoreFromPersistData()
    
    
    self:OnDriverLateInit_HouseLogix()    
    self:OnDriverLateInit_DriverCentral()
    self:OnDriverLateInit_SoftKiwi()
    
    -- TOFIX: see end of file for definition
    FIX_FOR_DRIVERCENTRAL = TimerManager:new(1, "SECONDS", self.onFIX_FOR_DRIVERCENTRALTimerExpire, false)
    FIX_FOR_DRIVERCENTRAL:start()

    C4:UpdateProperty("License Provider", "_!_")
    C4:UpdateProperty("License Provider", self:getCurrentVendorName())
end

-- TOFIX: DriverCentral re-enable AutoUpdate asyc...
function LicenseManager:onFIX_FOR_DRIVERCENTRALTimerExpire()
    if LICENSE_MGR:getCurrentVendorId() ~= "DRIVERCENTRAL" then
        C4:SetPropertyAttribs("Automatic Updates", 1)
    end
end


function LicenseManager:ReceivedFromProxy(idBinding, sCommand, tParams)
    --if self:getCurrentVendorId() == "DRIVERCENTRAL" then	
	--elseif self:getCurrentVendorId() == "HOUSELOGIX" then
    --elseif
    if self:getCurrentVendorId() == "SOFTKIWI" then
	    self:ReceivedFromProxy_SoftKiwi(idBinding, sCommand, tParams)
	end
end

function LicenseManager:OnPropertyChanged(strName)
    local propertyValue = Properties[strName]

    SKC4_LOGGER:debug("LicenseManager:OnPropertyChanged.",strName, propertyValue, type(propertyValue))

    if (LicenseManager.OnPropertyChangedTable[strName]) then
        status, err = pcall(LicenseManager.OnPropertyChangedTable[strName], self, propertyValue)
        if (not status) then
            if (SKC4_LOGGER ~= nil and type(SKC4_LOGGER) == "table") then
                SKC4_LOGGER:error("LUA_ERROR: ", err)
            end
        end
    --else
        --SKC4_LOGGER:debug("LicenseManager:OnPropertyChanged: this property is not related to License")
    end
end

function LicenseManager:SKC4_ON_PROPERTY_CHANGED_LicenseProvider(value)
	SKC4_LOGGER:debug("SKC4_ON_PROPERTY_CHANGED.LicenseProvider.",value, type(value))

    LICENSE_MGR:setCurrentVendorIdByName(value)
    
    if self:getCurrentVendorId() == "DRIVERCENTRAL" then
        return
    elseif self:getCurrentVendorId() == "HOUSELOGIX" then
        LICENSE_MGR.houselogixPropChangedTimerCheck = TimerManager:new(10, "SECONDS", LICENSE_MGR.Houselogix_Activate, false)
        LICENSE_MGR.houselogixPropChangedTimerCheck:start()
        --LICENSE_MGR:Houselogix_Activate()	
    elseif self:getCurrentVendorId() == "SOFTKIWI" then
        LICENSE_MGR:SoftKiwi_Activate()
    end

end

--
-- Vendor specific functions
--
function LicenseManager:OnDriverInit_DriverCentral()
    require "json"
	JSON=(loadstring(json.JSON_LIBRARY_CHUNK))()
    -- set global vars required by DriverCentral.io
    DC_PID = self:getParamValue("ProductId", "DRIVERCENTRAL") 
	DC_FD = self:getParamValue("FreeDriver", "DRIVERCENTRAL") 
    DC_FILENAME = self:getParamValue("FileName", "DRIVERCENTRAL") 
    
    require "SKC4.licence.cloud_client_v1007"
end
function LicenseManager:OnDriverLateInit_DriverCentral()
    -- do something...
end

---------------
-- HouseLogix
---------------
function LicenseManager:OnDriverInit_HouseLogix()
    -- do something...
end
function LicenseManager:OnDriverLateInit_HouseLogix()   
    if self:getParamValue("Trial", "HOUSELOGIX") == LicenseManager.TRIAL_STARTED then
        local trialExpiredLapse = self:getParamValue("TrialExpiredLapse", "HOUSELOGIX") 
        self.houselogixTimerTrial = TimerManager:new(trialExpiredLapse, "HOURS", self.onHouselogixTimerTrialExpire, false)
        self.houselogixTimerTrial:start()
    end
end

function LicenseManager:onHouselogixTimerExpire(ticketId, sData, responseCode, tHeaders)
    
    if (LICENSE_MGR:getCurrentVendorId() == "HOUSELOGIX") then
        LICENSE_MGR:Houselogix_Activate()	
    end
end

function LicenseManager:onHouselogixTimerTrialExpire(ticketId, sData, responseCode, tHeaders)
    SKC4_LOGGER:debug("Houselogix Trial timer Expired!")
    LICENSE_MGR:setParamValue("Trial", LicenseManager.TRIAL_EXPIRED, "HOUSELOGIX") 
    if (LICENSE_MGR:getCurrentVendorId() == "HOUSELOGIX") then
        LICENSE_MGR:setParamValue("Licensed", false, "HOUSELOGIX")
        LICENSE_MGR:Houselogix_Activate()	
    end
end

function LicenseManager:SKC4_ON_PROPERTY_CHANGED_HouselogixLicenseCode(value)
	SKC4_LOGGER:debug("SKC4_ON_PROPERTY_CHANGED.HouselogixLicenseCode","value:",value)
	HouselogixLicenseCode = value
    LICENSE_MGR:setParamValue("LicenseCode", HouselogixLicenseCode, "HOUSELOGIX")
    LICENSE_MGR:setParamValue("Licensed", false, "HOUSELOGIX")
    LICENSE_MGR:Houselogix_Activate()	
end

---------------
-- SoftKiwi
---------------
function LicenseManager:OnDriverInit_SoftKiwi()
    local model = C4:GetDeviceData(C4:GetDeviceID(),"model")
    C4:UpdateProperty ('SoftKiwi Driver Type', model)
end
function LicenseManager:OnDriverLateInit_SoftKiwi()   
    self:SoftKiwi_setDynamicBinding()
end

function LicenseManager:ReceivedFromProxy_SoftKiwi(idBinding, sCommand, tParams)
    SKC4_LOGGER:debug("LicenseManager:ReceivedFromProxy_SoftKiwi",idBinding, sCommand, tParams)
    local model = C4:GetDeviceData(C4:GetDeviceID(),"model")
    if idBinding == 998 and sCommand == "skLicenceRes" and tParams.MODEL == model then
		if tParams.IS_LICENSED == "True" then
            LICENSE_MGR:setParamValue("Licensed", true, "SOFTKIWI")
            LICENSE_MGR:setStatusMessage('Activated (last checked on: '..os.date("%m/%d/%Y %X")..')')
		else
            LICENSE_MGR:setParamValue("Licensed", false, "SOFTKIWI")
            LICENSE_MGR:setStatusMessage('Invalid license key')
        end
        
    end 
end

function LicenseManager:SoftKiwi_Activate()
    SKC4_LOGGER:debug("LicenseManager:SoftKiwi_Activate")
    self:SoftKiwi_setDynamicBinding()
    self:setStatusMessage('Activating driver...')
    LICENSE_MGR:setParamValue("Licensed", false, "SOFTKIWI")
    local model = C4:GetDeviceData(C4:GetDeviceID(),"model")
    local hash = LICENSE_MGR:getParamValue("LicenseCode","SOFTKIWI")
    SKC4_LOGGER:debug("LicenseManager:SoftKiwi_Activate", "send values for skLicenceCheck:", hash, model)
	C4:SendToProxy(998,"skLicenceCheck", {LIC = hash, MODEL = model})
end
  
function LicenseManager:SKC4_ON_PROPERTY_CHANGED_SoftKiwiLicenseCode(value)
	SKC4_LOGGER:debug("SKC4_ON_PROPERTY_CHANGED.SoftKiwiLicenseCode.","Value:", value)
	SoftKiwiLicenseCode = value
    LICENSE_MGR:setParamValue("LicenseCode", SoftKiwiLicenseCode, "SOFTKIWI")
    LICENSE_MGR:setParamValue("Licensed", false, "SOFTKIWI")
    LICENSE_MGR:SoftKiwi_Activate()	
end

function LicenseManager:SoftKiwi_setDynamicBinding()
    --SKC4_LOGGER:debug("LicenseManager:setDynamicBinding", "remove binding")
    --C4:RemoveDynamicBinding(998)
    SKC4_LOGGER:debug("LicenseManager:setDynamicBinding", "add binding")
    C4:AddDynamicBinding(998, "CONTROL", false, "softKiwi License", "SOFTKIWI_LICENSE", true, true)
end

--- -----------------------------------------------------------------
--- HOUSELOGIX LICENSE_MGR MANAGER
--- -----------------------------------------------------------------

function LicenseManager:trialTimerHandlerHouselogix()
    local trialExpiredLapse = self:getParamValue("TrialExpiredLapse", "HOUSELOGIX") 
    if self:getParamValue("Trial", "HOUSELOGIX") == LicenseManager.TRIAL_NOT_STARTED then
        self:setParamValue("Trial", LicenseManager.TRIAL_STARTED, "HOUSELOGIX") 
        self.houselogixTimerTrial = TimerManager:new(trialExpiredLapse, "HOURS", self.onHouselogixTimerTrialExpire, false)
        self:setStatusMessage('Trial mode')
        self.houselogixTimerTrial:start()
    elseif self:getParamValue("Trial", "HOUSELOGIX") == LicenseManager.TRIAL_STARTED then
    elseif self:getParamValue("Trial", "HOUSELOGIX") == LicenseManager.TRIAL_EXPIRED then 
        self:Houselogix_Activate()
    else
        print ("Houeselogix Trial unknow state: "..(tostring(self:getParamValue("Trial", "HOUSELOGIX")) or "nil"))
    end
end


function LicenseManager:Houselogix_Activate()
  LICENSE_MGR:setStatusMessage('Activating driver license...')
  mac = C4:GetUniqueMAC ()

  local license_code = LICENSE_MGR:getParamValue("LicenseCode", "HOUSELOGIX")
  local Houselogix_product_number = LICENSE_MGR:getParamValue("ProductId", "HOUSELOGIX")
  local sw_version = LICENSE_MGR:getParamValue("Version", "HOUSELOGIX")
  local postData = string.format('lic=%s&mac=%s&p=%s&ver=%s', license_code, mac, Houselogix_product_number, sw_version)
  SKC4_LOGGER:debug("LicenseManager:Houselogix_Activate()", "postData:", postData)
  ticketId = C4:urlPost('https://www.houselogix.com/license-manager/activatelicense.asp', postData, {}, false, LICENSE_MGR.Houselogix_Response)
  --methodType[ticketId] = "HLicense_Activate" -- QUESTA SERVE ANCORA? TOFIX
end

function LicenseManager.Houselogix_Response(ticketId, data, responseCode, tHeaders, strError )
    SKC4_LOGGER:debug('OnLicenseActivationResponseReceived',"ticketId", ticketId, "data", data)
  local i = string.find(data, 'Valid')
  if (i) then
    LICENSE_MGR:setParamValue("Licensed", true, "HOUSELOGIX")
    LICENSE_MGR:setStatusMessage('Activated (last checked on: '..os.date("%m/%d/%Y %X")..')')
  elseif (string.find(data, 'Unauthorized')) then
    LICENSE_MGR:setParamValue("Licensed", false, "HOUSELOGIX")
    LICENSE_MGR:setStatusMessage('Invalid license key')
  elseif (string.find(data, 'Failed')) then
    if LICENSE_MGR:getParamValue("Licensed", "HOUSELOGIX") then 
        LICENSE_MGR:setParamValue("Licensed", true, "HOUSELOGIX")
    else
        LICENSE_MGR:setParamValue("Licensed", false, "HOUSELOGIX")
    end
    LICENSE_MGR:setStatusMessage('Failed to verify')
  else
    LICENSE_MGR:setStatusMessage(strError)
  end
  local checkInterval =  LICENSE_MGR:getParamValue("ValidityCheckInterval", "HOUSELOGIX") 
  LICENSE_MGR.houselogixTimerCheck = TimerManager:new(checkInterval, "MINUTES", LICENSE_MGR.onHouselogixTimerExpire, false)
  LICENSE_MGR.houselogixTimerCheck:start()
end


LICENSE_MGR = LICENSE_MGR or LicenseManager:new()


return LicenseManager

 end)
package.preload['SKC4.Queue'] = (function (...)
local Queue = {}

function Queue:new(o)
  o = o or {}
  setmetatable(o, self)
  self.__index = self

  self._queue = {}
  self._first = 0
  self._last = -1
  return o
end

function Queue:push(object)
  local  key =  os.time(os.date('!*t'))
  local last = self._last + 1
  self._last = last
  self._queue[last] = {key = key, value = object}
end
function Queue:pop()
  if self:is_empty() then 
    return nil 
  end

  local first = self._first
  local item = self._queue[first]
  self._queue[first] = nil        -- to allow garbage collection
  self._first = first + 1
  return item.value
end

function Queue:push_by_key(key, object)
  local key_found = false
  -- look for existing item to update
  for i,item in pairs(self._queue) do
    if item.key == key then
      self._queue[i].value = object
      key_found = true
      break
    end
  end
  -- if no existing item, add it
  if (not key_found) then
    local last = self._last + 1
    self._last = last
    self._queue[last] = {key = key, value = object}
  end
end

function Queue:pop_by_key(key)
  if self:is_empty() then 
    return nil 
  end

  local returned_item = nil
  -- look for the item by key
  for i,item in pairs(self._queue) do
    if item.key == key then
      returned_item = item
    end

    -- if I found the item, strink the queue
    if returned_item then
      self._queue[i] = self._queue[i+1]
    end
  end

  -- if I found the item, reduce the lenght of queue
  if (returned_item) then
    local last = self._last
    self._queue[last] = nil
    self._last = last - 1
  end

  return returned_item
end

function Queue:size()
  local size = self._last - self._first + 1
  if size < 0 then
    size = 0
  end
  return size
end

function Queue:is_empty()
  return self:size() == 0
end

function Queue:empty()
  self._first = 0
  self._last = -1
  self._queue = nil
  self._queue = {}
end

function Queue.self_test()
  if (SKC4_LOGGER) then 
  
    SKC4_LOGGER:debug(":new()")
    local q = {}
    q = Queue:new()
    SKC4_LOGGER:debug("q is not nil:", not (q == nil))

    SKC4_LOGGER:debug("...queue is empty", q:is_empty(), "[",q:size(),"]")
    q:push("ciccio1")
    SKC4_LOGGER:debug("...successfully pushed 1 element", q:size() == 1, "[",q:size(),"]")
    q:push("ciccio2")
    q:push("ciccio3")
    SKC4_LOGGER:debug("...successfully pushed 3 elements", q:size() == 3, "[",q:size(),"]")
    local v = q:pop()
    SKC4_LOGGER:debug("...successfully poped 1 element", q:size() == 2, "[",q:size(),",",v,"]")
    v = q:pop()
    SKC4_LOGGER:debug("...successfully poped 1 element", q:size() == 1, "[",q:size(),",",v,"]")
    v = q:pop()
    SKC4_LOGGER:debug("...successfully poped 1 element", q:size() == 0, "[",q:size(),",",v,"]")
    v = q:pop()
    SKC4_LOGGER:debug("...successfully poped nil element", q:size() == 0, "[",q:size(),",",v,"]")
      

    SKC4_LOGGER:debug("...queue is empty", q:is_empty(), "[",q:size(),"]")
    q:push_by_key("uno","ciccio1")
    SKC4_LOGGER:debug("...successfully push_by_key 1 element with key", q:size() == 1, "[",q:size(),"]")
    q:push_by_key("due","ciccio2")
    q:push_by_key("tre","ciccio3")
    SKC4_LOGGER:debug("...successfully push_by_key 2 elements", q:size() == 3, "[",q:size(),"]")
    q:push_by_key("due","ciccio_due")
    q:push_by_key("tre","ciccio_tre")
    SKC4_LOGGER:debug("...successfully update 2 elements", q:size() == 3, "[",q:size(),"]")
    
    local v = q:pop_by_key("due")
    SKC4_LOGGER:debug("...successfully pop_by_key 1 element", q:size() == 2, "[",q:size(),",",v,"]")
    v = q:pop_by_key("uno")
    SKC4_LOGGER:debug("...successfully pop_by_key 1 element", q:size() == 1, "[",q:size(),",",v,"]")
    v = q:pop_by_key("due")
    SKC4_LOGGER:debug("... fail to pop pop_by_key element", q:size() == 1, "[",q:size(),",",v,"]")
    v = q:pop()
    SKC4_LOGGER:debug("...successfully poped 1 element", q:size() == 0, "[",q:size(),",",v,"]")
    v = q:pop()
    SKC4_LOGGER:debug("...successfully poped nil element", q:size() == 0, "[",q:size(),",",v,"]")

    SKC4_LOGGER:debug("queue is", q._queue)
  else
    print("Please make SKC4_LOGGER available befor run self_test")
  end
end

return Queue end)
package.preload['SKC4.ApiRestManager'] = (function (...)
local Queue = require "SKC4.Queue"
local TimerManager = require "SKC4.TimerManager"
local ApiRestManager = {}

function ApiRestManager:new(o)
  o = o or {}
  setmetatable(o, self)
  self.__index = self
  
  self._queue = Queue:new()
  -- self._timer_pool = {}
  self._templates = {}
  self._username = ""
  self._password = ""
  self._base_url = ""
  self._authentication = "none"

  self._max_concurrent_requests = 1
  self._delayed_requests_interval = 1000
  self._delayed_requests_enabled = false
  self._delayed_requests_mode = "fixed" -- or random

  self._fail_on_error = true
  self._timeout = 30
  self._connect_timeout = 5
  self._ssl_verify_host = true
  self._ssl_verify_peer = true
  self._ssl_cabundle = nil
  self._ssl_cert = nil
  self._ssl_cert_type = "PEM"
  self._ssl_key = nil
  self._ssl_passwd = nil
  self._ssl_cacerts = nil


  return o
end

function ApiRestManager:set_max_concurrent_requests(value)
  if (value < 1) then
    value = 1
  end
  self._max_concurrent_requests = value
end
function ApiRestManager:get_max_concurrent_requests()
  return self._max_concurrent_requests
end

function ApiRestManager:set_username(value)
  self._username = value
end
function ApiRestManager:set_password(value)
  self._password = value
end
function ApiRestManager:get_username()
  return self._username
end
function ApiRestManager:get_password()
  return self._password
end
function ApiRestManager:set_base_url(value)
  self._base_url = value:gsub("%s+", "")
end
function ApiRestManager:get_base_url()
  return self._base_url
end

function ApiRestManager:is_fail_on_error_enabled()
  return self._fail_on_error
end
function ApiRestManager:enable_fail_on_error()
  self._fail_on_error = true
end
function ApiRestManager:disable_fail_on_error()
  self._fail_on_error = false
end
function ApiRestManager:get_timeout()
  return self._timeout
end
function ApiRestManager:set_timeout(value)
  self._timeout = value
end
function ApiRestManager:get_connect_timeout()
  return self._connect_timeout
end
function ApiRestManager:set_connect_timeout(value)
  self._connect_timeout = value
end
function ApiRestManager:is_ssl_verify_host_enabled()
  return self._ssl_verify_host
end
function ApiRestManager:enable_ssl_verify_host()
  self._ssl_verify_host = true
end
function ApiRestManager:disable_ssl_verify_host()
  self._ssl_verify_host = false
end
function ApiRestManager:is_ssl_verify_peer_enabled()
  return self._ssl_verify_peer
end
function ApiRestManager:enable_ssl_verify_peer()
  self._ssl_verify_peer = true
end
function ApiRestManager:disable_ssl_verify_peer()
  self._ssl_verify_peer = false
end
function ApiRestManager:get_ssl_cabundle()
  return self._ssl_cabundle
end
function ApiRestManager:set_ssl_cabundle(value)
  self._ssl_cabundle = value
end
function ApiRestManager:get_ssl_cert()
  return self._ssl_cert
end
function ApiRestManager:set_ssl_cert(value)
  self._ssl_cert = value
end
function ApiRestManager:get_ssl_cert_type()
  return self._ssl_cert_type
end
function ApiRestManager:set_ssl_cert_type(value)
  self._ssl_cert_type = value
end
function ApiRestManager:get_ssl_key()
  return self._ssl_key
end
function ApiRestManager:set_ssl_key(value)
  self._ssl_key = value
end
function ApiRestManager:get_ssl_passwd()
  return self._ssl_passwd
end
function ApiRestManager:set_ssl_passwd(value)
  self._ssl_passwd = value
end
function ApiRestManager:get_ssl_cacerts()
  return self._ssl_cacerts
end
function ApiRestManager:set_ssl_cacerts(value)
  self._ssl_cacerts = value
end

function ApiRestManager:enable_digest_authentication()
  self._authentication = "digest"
end
function ApiRestManager:enable_basic_authentication()
  self._authentication = "basic"
end
function ApiRestManager:disable_authentication()
  self._authentication = "none"
end
function ApiRestManager:has_authentication()
  return (self._authentication ~= "none")
end
function ApiRestManager:has_basic_authentication()
  return (self._authentication == "basic")
end
function ApiRestManager:has_digest_authentication()
  return (self._authentication == "digest")
end

function ApiRestManager:set_delayed_requests_interval(value)
  if (value < 100) then
    value = 100
  end
  self._delayed_requests_interval = value
end
function ApiRestManager:get_delayed_requests_interval()

  if (self:is_enable_delayed_requests_mode_fixed()) then
    return self._delayed_requests_interval
  else
    math.randomseed(os.time())
    local random_interval = math.random(self._delayed_requests_interval)
  end
end

function ApiRestManager:are_delayed_requests_enabled()
  return self._delayed_requests_enabled
end
function ApiRestManager:enable_delayed_requests()
  self._delayed_requests_enabled = true
end
function ApiRestManager:disable_delayed_requests()
  self._delayed_requests_enabled = false
end


function ApiRestManager:enable_delayed_requests_mode_fixed()
  self._delayed_requests_mode = "fixed"
end
function ApiRestManager:enable_delayed_requests_mode_random()
  self._delayed_requests_mode = "random"
end

function ApiRestManager:is_enable_delayed_requests_mode_fixed()
  return self._delayed_requests_mode == "fixed"
end
function ApiRestManager:is_enable_delayed_requests_mode_random()
  return self._delayed_requests_mode == "random"
end



function ApiRestManager:add_request(verb, endpoint, headers, params, data, done_callback, response_processor, endpoint_processor, headers_processor, params_processor, data_processor)
  local new_request = self:build_new_request(verb, endpoint, headers, params, data, done_callback, response_processor, endpoint_processor, headers_processor, params_processor, data_processor)
  self._queue:push(new_request)
end
function ApiRestManager:add_request_by_key(key, verb, endpoint, headers, params, data, done_callback, response_processor, endpoint_processor, headers_processor, params_processor, data_processor)
  local new_request = self:build_new_request(verb, endpoint, headers, params, data, done_callback, response_processor, endpoint_processor, headers_processor, params_processor, data_processor)
  self._queue:push_by_key(key, new_request)
end
function ApiRestManager:build_new_request(verb, endpoint, headers, params, data, done_callback, response_processor, endpoint_processor, headers_processor, params_processor, data_processor)
  local  new_request = {}
  
  
  if (endpoint_processor == nil) then
    endpoint_processor = self.querystring_params_processor
  end
  if (headers_processor == nil) then
    headers_processor = self.dummy_headers_processor
  end
  if (params_processor == nil) then
    params_processor = self.dummy_params_processor
  end
  if (data_processor == nil) then
    data_processor = self.json_data_processor
  end
  if (response_processor == nil) then
    response_processor = self.json_response_processor
  end
  
  if (self:has_basic_authentication()) then
    headers = headers or {}
    headers["Authorization"] = "Basic "..self:generate_encoded_credential(self:get_username(), self:get_password())
  end

  new_request["verb"] = string.lower(verb)

  _ , new_request["headers"]  = pcall(headers_processor, self, headers)
  _ , new_request["params"]   = pcall(params_processor, self, params)
  _ , new_request["data"]     = pcall(data_processor, self, data)
  _ , new_request["endpoint"] = pcall(endpoint_processor, self, endpoint, new_request["params"], new_request["headers"])
  
  local raw_url = self:get_base_url()
  
  local found_protocol = ""
  if (string.find(raw_url, 'http://')) then
    found_protocol = "http://"
  elseif (string.find(raw_url, 'https://')) then
    found_protocol = "https://"
  end
  
  if (self:has_digest_authentication()) then
    -- TODO gestire la presenza di http all'inizio
    local server_address = string.gsub(raw_url,found_protocol,"")
    new_request["url"] = found_protocol..self:get_username()..":"..self:get_password().."@"..server_address
  else
    new_request["url"] = self:get_base_url()
  end

  new_request["url"] = new_request["url"] .. new_request["endpoint"]
  
  local options = {}
  if (self._fail_on_error) then options["fail_on_error"] = self._fail_on_error end
  if (self._timeout) then options["timeout"] = self._timeout end
  if (self._connect_timeout) then options["connect_timeout"] = self._connect_timeout end
  if (self._connect_timeout) then options["connect_timeout"] = self._connect_timeout end
  if (self._ssl_verify_host) then options["ssl_verify_host"] = self._ssl_verify_host end
  if (self._ssl_verify_peer) then options["ssl_verify_peer"] = self._ssl_verify_peer end
  if (self._ssl_cabundle) then options["ssl_cabundle"] = self._ssl_cabundle end
  if (self._ssl_cert) then options["ssl_cert"] = self._ssl_cert end
  if (self._ssl_cert_type) then options["ssl_cert_type"] = self._ssl_cert_type end
  if (self._ssl_key) then options["ssl_key"] = self._ssl_key end
  if (self._ssl_passwd) then options["ssl_passwd"] = self._ssl_passwd end
  if (self._ssl_cacerts) then options["ssl_cacerts"] = self._ssl_cacerts end
   
  new_request["handler"] = C4:url():OnBody(response_processor):SetOptions(options):OnDone(done_callback)

  if (SKC4_LOGGER) then
    SKC4_LOGGER:debug("ApiRestManager:build_new_request new_request is:\n", new_request)
  end
  
  return new_request
end

function ApiRestManager:send_next_requests_later(milliseconds)
  -- default: 5 seconds delay
  if (milliseconds) then
    milliseconds = 5000
  end

  local t = TimerManager:new(interval, "MILLISECONDS", function()
    self:send_next_requests()
  end)
end

function ApiRestManager:send_next_requests()

  for i = 1, self._max_concurrent_requests do
    if not self._queue:is_empty() then
      -- se la coda non è vuota
      local request = self._queue:pop()
      if (SKC4_LOGGER) then
        SKC4_LOGGER:debug("Request to serve:", request)
      end
      if (self._delayed_requests_enabled) then
        local interval = self:get_delayed_requests_interval()
        local t = TimerManager:new(interval, "MILLISECONDS", function()
          ApiRestManager.send_delayed_request_timer_callback(request)
        end)
        t:start()
      else
        ApiRestManager.call_api_rest_request(request)
      end
    else
      break -- esce dal for se coda vuota
    end
  end
end

function ApiRestManager.send_delayed_request_timer_callback(request)
  if (SKC4_LOGGER) then
    SKC4_LOGGER:debug("Request stored in timer obj:", request)
  end
  ApiRestManager.call_api_rest_request(request)
end

function ApiRestManager.call_api_rest_request(request)
  if (request) then
    if (request["verb"]=="get") then
      request.handler:Get(request.url, request.headers)
    elseif (request["verb"]=="post") then
      request.handler:Post(request.url, request.data, request.headers)
    elseif (request["verb"]=="put") then
      request.handler:Put(request.url, request.data, request.headers)
    elseif (request["verb"]=="delete") then
      request.handler:Delete(request.url, request.headers)
    else
      if (SKC4_LOGGER) then
        SKC4_LOGGER:debug("ApiRestManager: Incorrect request:", request)
      end
    end
  else
    if (SKC4_LOGGER) then
      SKC4_LOGGER:debug("ApiRestManager: Nil request:", request)
    end
  end

end

function ApiRestManager:generate_encoded_credential(username, password)
  return C4:Base64Encode(tostring(username)..":"..tostring(password))
end

function ApiRestManager:define_template(name, verb, endpoint, done_callback, response_processor, endpoint_processor, headers_processor, params_processor, data_processor)
  self._templates[name] = {
    verb = verb, 
    endpoint = endpoint, 
    done_callback = done_callback, 
    response_processor = response_processor, 
    endpoint_processor = endpoint_processor, 
    headers_processor = headers_processor, 
    params_processor = params_processor, 
    data_processor = data_processor
  }
end
function ApiRestManager:remove_template(name)
  self._templates[name] = nil
end
function ApiRestManager:get_template(name)
  return self._templates[name]
end
function ApiRestManager:template_exists(name)
  return (self._templates[name] ~= nil)
end

function ApiRestManager:add_request_by_template(name, headers, params, data)
  local template = self:get_template(name)
  return self:add_request( 
                        template["verb"], 
                        template["endpoint"], 
                        headers, 
                        params, 
                        data, 
                        template["done_callback"], 
                        template["response_processor"], 
                        template["endpoint_processor"], 
                        template["headers_processor"], 
                        template["params_processor"], 
                        template["data_processor"]
                      )
end
function ApiRestManager:add_request_by_template_by_key(name, key, headers, params, data)
  local template = self:get_template(name)
  return self:add_request_by_key(key, 
                        template["verb"], 
                        template["endpoint"], 
                        headers, 
                        params, 
                        data, 
                        template["done_callback"], 
                        template["response_processor"], 
                        template["endpoint_processor"], 
                        template["headers_processor"], 
                        template["params_processor"], 
                        template["data_processor"]
                      )
end




function ApiRestManager:querystring_params_processor(endpoint, params, headers)
  if (endpoint) then
    if (params == nil) then 
      params = {}
    end
    local ret_string = nil
    for k,v in pairs(params) do
      if (ret_string == nil) then
        ret_string = "?"
      else
        ret_string = ret_string .. "&"
      end
      ret_string = ret_string..tostring(k).."="..ApiRestManager.encode_value(tostring(v))
    end
    if (ret_string) then
      return endpoint..ret_string
    else
      return endpoint
    end
  else
    return ""
  end
end

function ApiRestManager:json_data_processor(data)
  if (type(data) == "table") then
    return C4:JsonEncode(data)
  else
    return tostring(data)
  end
end
function ApiRestManager:dummy_headers_processor(headers)
  return headers or {}
end
function ApiRestManager:dummy_params_processor(params)
  return params or {}
end
function ApiRestManager:json_response_processor(transfer, response)
  if (response) then
    if (response.data) then
      response.data = C4:JsonDecode(response.data)
    end
  end
end

function ApiRestManager.encode_value(str)
	local ret_str = (str:gsub("([^A-Za-z0-9%_%.%-%~])", function(v)
			return string.upper(string.format("%%%02x", string.byte(v)))
  end))
	return ret_str:gsub('%%20', '+')
end


----------------------
-- Test
----------------------
function ApiRestManager.self_test()

end

return ApiRestManager end)
package.preload['SKC4.DriverCore'] = (function (...)
require("SKC4.Utility")
local TimerManager = require "SKC4.TimerManager"
require("SKC4.Logger");
if (LOGGER == nil or type(LOGGER) ~= "table") then
  LOGGER = SKC4_LOGGER
end


----------------------------------------------------
-- Global tables for functions
----------------------------------------------------
if (SKC4_ON_DRIVER_EARLY_INIT == nil) then
  SKC4_ON_DRIVER_EARLY_INIT = {}
end
if (SKC4_ON_DRIVER_INIT == nil) then
  SKC4_ON_DRIVER_INIT = {}
end
if (SKC4_ON_DRIVER_LATE_INIT == nil) then
  SKC4_ON_DRIVER_LATE_INIT = {}
end
SKC4_ON_DRIVER_LATEINIT = SKC4_ON_DRIVER_LATE_INIT -- alias per retrocompatibilita'
if (SKC4_ON_DRIVER_DESTROYED == nil) then
  SKC4_ON_DRIVER_DESTROYED = {}
end
if (SKC4_ON_PROPERTY_CHANGED == nil) then
  SKC4_ON_PROPERTY_CHANGED = {}
end
if (SKC4_COMMANDS == nil) then
  SKC4_COMMANDS = {}
end
if (SKC4_ACTIONS == nil) then
  SKC4_ACTIONS = {}
end
if (SKC4_PROXY_COMMANDS == nil) then
  SKC4_PROXY_COMMANDS = {}
end
if (SKC4_NOTIFICATIONS == nil) then
  SKC4_NOTIFICATIONS = {}
end
if (SKC4_ON_VARIABLE_CHANGED == nil) then
  SKC4_ON_VARIABLE_CHANGED = {}
end
if (SKC4_CONDITIONALS == nil) then
  SKC4_CONDITIONALS = {}
end



SKC4_PROPERTY_DISABLE_LOG_INTERVAL="Disable Log Interval"
SKC4_PROPERTY_LOG_MODE="Log Mode"
SKC4_PROPERTY_LOG_LEVEL="Log Level"


if (ON_DRIVER_EARLY_INIT == nil) then
  ON_DRIVER_EARLY_INIT = {}
end
if (ON_DRIVER_INIT == nil) then
  ON_DRIVER_INIT = {}
end
if (ON_DRIVER_LATE_INIT == nil) then
  ON_DRIVER_LATE_INIT = {}
end
ON_DRIVER_LATEINIT = ON_DRIVER_LATE_INIT -- alias per retrocompatibilita'

if (ON_DRIVER_DESTROYED == nil) then
  ON_DRIVER_DESTROYED = {}
end
if (ON_PROPERTY_CHANGED == nil) then
  ON_PROPERTY_CHANGED = {}
end
if (ACTIONS == nil) then
  ACTIONS = {}
end
if (COMMANDS == nil) then
  COMMANDS = {}
end
if (PROXY_COMMANDS == nil) then
  PROXY_COMMANDS = {}
end
if (NOTIFICATIONS == nil) then
  NOTIFICATIONS = {}
end
if (ON_VARIABLE_CHANGED == nil) then
  ON_VARIABLE_CHANGED = {}
end
if (VARIABLE_ID_MAP == nil) then
  VARIABLE_ID_MAP = Utility.PersistGetValue("VARIABLE_ID_MAP") or {}
end
if (CONDITIONALS == nil) then
  CONDITIONALS = {}
end

----------------------------------------------------
-- Inits
----------------------------------------------------
function OnDriverInit(driverInitType)
	gInitializingDriver = true
	SKC4_LOGGER:debug("INIT_CODE: OnDriverInit()")

  -- Call all SKC4_ON_DRIVER_EARLY_INIT functions.
  local status, err_tbl = Utility.callAllFunctionsInTable(SKC4_ON_DRIVER_EARLY_INIT, driverInitType)
  if (not status) then    
    if (SKC4_LOGGER ~= nil and type(SKC4_LOGGER) == "table") then
      SKC4_LOGGER:debug("LUA_ERROR on SKC4_ON_DRIVER_EARLY_INIT: ", err_tbl)
    end
  end
  local status, err_tbl = Utility.callAllFunctionsInTable(ON_DRIVER_EARLY_INIT, driverInitType)
  if (not status) then    
    if (SKC4_LOGGER ~= nil and type(SKC4_LOGGER) == "table") then
      SKC4_LOGGER:debug("LUA_ERROR on ON_DRIVER_EARLY_INIT: ", err_tbl)
    end
  end
  
  status, err_tbl = Utility.callAllFunctionsInTable(SKC4_ON_DRIVER_INIT, driverInitType)
  if (not status) then    
    if (SKC4_LOGGER ~= nil and type(SKC4_LOGGER) == "table") then
      SKC4_LOGGER:debug("LUA_ERROR on SKC4_ON_DRIVER_INIT: ", err_tbl)
    end
  end
	status, err_tbl = Utility.callAllFunctionsInTable(ON_DRIVER_INIT, driverInitType)
  if (not status) then    
    if (SKC4_LOGGER ~= nil and type(SKC4_LOGGER) == "table") then
      SKC4_LOGGER:debug("LUA_ERROR on ON_DRIVER_INIT: ", err_tbl)
    end
  end
  
  -- Enable license manager if it's required
  if (LICENSE_MGR) then
    LICENSE_MGR:OnDriverInit()
  end
  
end

function OnDriverLateInit(driverInitType)
  SKC4_LOGGER:debug("INIT_CODE: OnDriverLateInit()")
  --avviato al ri-avvio del driver per avere un ping (il math random evita che tutti i driver partano contemporaneamente)
  math.randomseed(os.time())
  local rand_wait = math.random (3000, 7000)
  SKC4_LOGGER:debug("INIT_CODE: OnDriverLateInit() Random -> ", rand_wait)

  -- uso la clousure per passare il parametro al timer
  function fn_asdf546flkjefa_callback() 
    OnDriverLateInit_callback(driverInitType)
  end
  
  TIMER_ON_DRIVER_LATE_INIT_FIX = TimerManager:new(rand_wait, "MILLISECONDS", fn_asdf546flkjefa_callback, false)
  TIMER_ON_DRIVER_LATE_INIT_FIX:start()
end

function OnDriverLateInit_callback(driverInitType)
	SKC4_LOGGER:debug("INIT_CODE: OnDriverLateInit_callback()")
  -- Fire OnPropertyChanged to set the initial Headers and other Property
	-- global sets, they'll change if Property is changed.
  for k,v in pairs(Properties) do
    if (SKC4_LOGGER ~= nil and type(SKC4_LOGGER) == "table") then
      SKC4_LOGGER:debug("INIT_CODE: Calling OnPropertyChanged -",k,":",v)
    end
		local status, err = pcall(OnPropertyChanged, k)
    if (not status) then    
      if (SKC4_LOGGER ~= nil and type(SKC4_LOGGER) == "table") then
        SKC4_LOGGER:debug("LUA_ERROR: ", err)
      end
    end
	end

	gInitializingDriver = false

  -- Enable license manager if it's required
  if (LICENSE_MGR) then
    LICENSE_MGR:OnDriverLateInit()
  end

  local status, err_tbl = Utility.callAllFunctionsInTable(SKC4_ON_DRIVER_LATE_INIT, driverInitType)
  if (not status) then    
    if (SKC4_LOGGER ~= nil and type(SKC4_LOGGER) == "table") then
      SKC4_LOGGER:debug("LUA_ERROR on SKC4_ON_DRIVER_LATE_INIT: ", err_tbl)
    end
  end
  local status, err_tbl = Utility.callAllFunctionsInTable(ON_DRIVER_LATE_INIT, driverInitType)
  if (not status) then    
    if (SKC4_LOGGER ~= nil and type(SKC4_LOGGER) == "table") then
      SKC4_LOGGER:debug("LUA_ERROR on ON_DRIVER_LATE_INIT: ", err_tbl)
    end
  end

  
end

function OnDriverDestroyed(driverInitType)
	C4:ErrorLog("INIT_CODE: OnDriverDestroyed()")
  
  local status, err_tbl = Utility.callAllFunctionsInTable(SKC4_ON_DRIVER_DESTROYED, driverInitType)
  if (not status) then    
    if (SKC4_LOGGER ~= nil and type(SKC4_LOGGER) == "table") then
      SKC4_LOGGER:debug("LUA_ERROR on SKC4_ON_DRIVER_DESTROYED: ", err_tbl)
    end
  end
  local status, err_tbl = Utility.callAllFunctionsInTable(ON_DRIVER_DESTROYED, driverInitType)
  if (not status) then    
    if (SKC4_LOGGER ~= nil and type(SKC4_LOGGER) == "table") then
      SKC4_LOGGER:debug("LUA_ERROR on ON_DRIVER_DESTROYED: ", err_tbl)
    end
  end
end 

----------------------------------------------------
-- Properties
----------------------------------------------------
function OnPropertyChanged(sProperty)
	local propertyValue = Properties[sProperty]

	if (SKC4_LOGGER ~= nil and type(SKC4_LOGGER) == "table") then
		SKC4_LOGGER:info("OnPropertyChanged(", sProperty,") changed to:", propertyValue)
  end
  if (LICENSE_MGR) then
    LICENSE_MGR:OnPropertyChanged(sProperty) --, propertyValue)
  end

	-- Remove any spaces (trim the property)
  local sanitizedProperty = string.gsub(sProperty, "[%%/,%-()#@%[%]]+", "")
  local trimmedProperty = string.gsub(sanitizedProperty, "%s", "_")
	local status = true
	local err = ""

	if (SKC4_ON_PROPERTY_CHANGED[sProperty] ~= nil and type(SKC4_ON_PROPERTY_CHANGED[sProperty]) == "function") then
		status, err = pcall(SKC4_ON_PROPERTY_CHANGED[sProperty], propertyValue)
	elseif (SKC4_ON_PROPERTY_CHANGED[trimmedProperty] ~= nil and type(SKC4_ON_PROPERTY_CHANGED[trimmedProperty]) == "function") then
		status, err = pcall(SKC4_ON_PROPERTY_CHANGED[trimmedProperty], propertyValue)
	end

  if (ON_PROPERTY_CHANGED[sProperty] ~= nil and type(ON_PROPERTY_CHANGED[sProperty]) == "function") then
		status, err = pcall(ON_PROPERTY_CHANGED[sProperty], propertyValue)
	elseif (ON_PROPERTY_CHANGED[trimmedProperty] ~= nil and type(ON_PROPERTY_CHANGED[trimmedProperty]) == "function") then
		status, err = pcall(ON_PROPERTY_CHANGED[trimmedProperty], propertyValue)
	end

  if (not status) then
    if (SKC4_LOGGER ~= nil and type(SKC4_LOGGER) == "table") then
      SKC4_LOGGER:error("LUA_ERROR: ", err)
    end
	end
end


function UpdateProperty(propertyName, propertyValue)
	if (Properties[propertyName] ~= nil) then
		C4:UpdateProperty(propertyName, propertyValue)
	end
end


----------------------------------------------------
-- Commands
----------------------------------------------------
function ExecuteCommand(strCommand, tParams)
  
  if (SKC4_LOGGER ~= nil and type(SKC4_LOGGER) == "table") then
    SKC4_LOGGER:info("ExecuteCommand(", strCommand, ") with params",tParams)
  end

  -- Remove any spaces (trim the property)
  local trimmedProperty = string.gsub(strCommand, " ", "_")
  local status = true
  local err = ""

  if (strCommand == "LUA_ACTION") then
    local action = tParams["ACTION"]
    local trimmedAction = string.gsub(action, " ", "_")
    if (SKC4_ACTIONS[action] ~= nil and type(SKC4_ACTIONS[action]) == "function") then
      status, err = pcall(SKC4_ACTIONS[action], tParams)
    elseif (SKC4_COMMANDS[trimmedAction] ~= nil and type(SKC4_COMMANDS[trimmedAction]) == "function") then
      status, err = pcall(SKC4_COMMANDS[trimmedAction], tParams)
    end

    if (ACTIONS[action] ~= nil and type(ACTIONS[action]) == "function") then
      status, err = pcall(ACTIONS[action], tParams)
    elseif (COMMANDS[trimmedAction] ~= nil and type(COMMANDS[trimmedAction]) == "function") then
      status, err = pcall(COMMANDS[trimmedAction], tParams)
    end
  else
    if (SKC4_COMMANDS[strCommand] ~= nil and type(SKC4_COMMANDS[strCommand]) == "function") then
      status, err = pcall(SKC4_COMMANDS[strCommand], tParams)
    elseif (SKC4_COMMANDS[trimmedProperty] ~= nil and type(SKC4_COMMANDS[trimmedProperty]) == "function") then
      status, err = pcall(SKC4_COMMANDS[trimmedProperty], tParams)
    end

    if (COMMANDS[strCommand] ~= nil and type(COMMANDS[strCommand]) == "function") then
      status, err = pcall(COMMANDS[strCommand], tParams)
    elseif (COMMANDS[trimmedProperty] ~= nil and type(COMMANDS[trimmedProperty]) == "function") then
      status, err = pcall(COMMANDS[trimmedProperty], tParams)
    end
  end
  if (not status) then
    if (SKC4_LOGGER ~= nil and type(SKC4_LOGGER) == "table") then
      SKC4_LOGGER:error("LUA_ERROR: ", err)
    end
	end
end

function ReceivedFromProxy(idBinding, strCommand, tParams)
	if (strCommand ~= nil) then
		-- initial table variable if nil
		if (tParams == nil) then
			tParams = {}
    end
    if (SKC4_LOGGER ~= nil and type(SKC4_LOGGER) == "table") then
      SKC4_LOGGER:info("ReceivedFromProxy(", strCommand, ") with params ",tParams, idBinding)
    end

    if (LICENSE_MGR) then
      LICENSE_MGR:ReceivedFromProxy(idBinding, strCommand, tParams)
    end
    
    -- Remove any spaces (trim the property)
    local trimmedProperty = string.gsub(strCommand, " ", "_")
    local status = true
    local err = ""
  
    if (SKC4_PROXY_COMMANDS[strCommand] ~= nil and type(SKC4_PROXY_COMMANDS[strCommand]) == "function") then
      status, err = pcall(SKC4_PROXY_COMMANDS[strCommand], tParams, idBinding)
    elseif (SKC4_PROXY_COMMANDS[trimmedProperty] ~= nil and type(SKC4_PROXY_COMMANDS[trimmedProperty]) == "function") then
      status, err = pcall(SKC4_PROXY_COMMANDS[trimmedProperty], tParams, idBinding)
    end

    if (PROXY_COMMANDS[strCommand] ~= nil and type(PROXY_COMMANDS[strCommand]) == "function") then
      status, err = pcall(PROXY_COMMANDS[strCommand], tParams, idBinding)
    elseif (PROXY_COMMANDS[trimmedProperty] ~= nil and type(PROXY_COMMANDS[trimmedProperty]) == "function") then
      status, err = pcall(PROXY_COMMANDS[trimmedProperty], tParams, idBinding)
    end
  
    if (not status) then
      if (SKC4_LOGGER ~= nil and type(SKC4_LOGGER) == "table") then
        SKC4_LOGGER:error("LUA_ERROR: ", err)
      end
    end

	end
end

----------------------------------------------------
-- Notifications
----------------------------------------------------

----------------------------------------------------
-- Varialbes
----------------------------------------------------

function OnVariableChanged(strName)
	if (strName ~= nil) then
		if (SKC4_LOGGER ~= nil and type(SKC4_LOGGER) == "table") then
      SKC4_LOGGER:info("OnVariableChanged(", strName, ")")
    end

    -- Remove any spaces (trim the property)
    local trimmedName = string.gsub(strName, " ", "_")
    local status = true
    local err = ""
  
    if (SKC4_ON_VARIABLE_CHANGED[strName] ~= nil and type(SKC4_ON_VARIABLE_CHANGED[strName]) == "function") then
      status, err = pcall(SKC4_ON_VARIABLE_CHANGED[strName], strName)
    elseif (SKC4_ON_VARIABLE_CHANGED[trimmedName] ~= nil and type(SKC4_ON_VARIABLE_CHANGED[trimmedName]) == "function") then
      status, err = pcall(SKC4_ON_VARIABLE_CHANGED[trimmedName], strName)
    end

    if (ON_VARIABLE_CHANGED[strName] ~= nil and type(ON_VARIABLE_CHANGED[strName]) == "function") then
      status, err = pcall(ON_VARIABLE_CHANGED[strName], strName)
    elseif (ON_VARIABLE_CHANGED[trimmedName] ~= nil and type(ON_VARIABLE_CHANGED[trimmedName]) == "function") then
      status, err = pcall(ON_VARIABLE_CHANGED[trimmedName], strName)
    end
  
    if (not status) then
      if (SKC4_LOGGER ~= nil and type(SKC4_LOGGER) == "table") then
        SKC4_LOGGER:error("LUA_ERROR: ", err)
      end
    end

	end
end

function AddVariable(strName, strValue, strVarType, bReadOnly, bHidden)
  local is_ok, variable_id = C4:AddVariable(strName, tostring(strValue), strVarType, bReadOnly, bHidden)
  if (is_ok) then
    --VARIABLE_ID_MAP[strName]=variable_id
    SKC4_LOGGER:debug("Variable", strName, "has been created")
  else
    if (SKC4_LOGGER ~= nil and type(SKC4_LOGGER) == "table") then
      if (Variables[strName]) then
        SKC4_LOGGER:error("Variable", strName, "already exists")
      else
        SKC4_LOGGER:error("Unable to create", strName, "variable")
      end
    end
  end

  --if (is_ok) then
  --  VARIABLE_ID_MAP[strName]=variable_id
  --  SKC4_LOGGER:debug("Variable", strName, "has been created")
  --else
  --  if (SKC4_LOGGER ~= nil and type(SKC4_LOGGER) == "table") then
  --    if (VARIABLE_ID_MAP[strName]) then
  --      SKC4_LOGGER:error("Variable", strName, "already exists")
  --    else
  --      SKC4_LOGGER:error("Unable to create", strName, "variable")
  --    end
  --  end
  --end
end

function GetVariable(strName)
  if (strName  ~= nil) then
    return Variables[strName]
  else
    if (SKC4_LOGGER ~= nil and type(SKC4_LOGGER) == "table") then
      SKC4_LOGGER:error("No variable name!")
    end
  end
    
  -- local variable_id = VARIABLE_ID_MAP[strName]
  -- if (variable_id  ~= nil) then
  --   local device_id = C4:GetDeviceID();
  --   return C4:GetVariable(device_id, variable_id)
  -- else
  --   if (SKC4_LOGGER ~= nil and type(SKC4_LOGGER) == "table") then
  --     SKC4_LOGGER:error("Variable", strName, "not found")
  --   end
  -- end
end

function SetVariable(strName, strValue)
  --local variable_id = VARIABLE_ID_MAP[strName]
  if (strName  ~= nil) then
    if (type(strValue)=="boolean") then
      if (strValue) then 
        strValue="1"
      else 
        strValue="0"
      end
    end
    return C4:SetVariable(strName, tostring(strValue))
  else
    if (SKC4_LOGGER ~= nil and type(SKC4_LOGGER) == "table") then
      SKC4_LOGGER:error("No variable name!")
    end
  end

  -- local variable_id = VARIABLE_ID_MAP[strName]
  -- if (variable_id  ~= nil) then
  --   return C4:SetVariable(variable_id, strValue)
  -- else
  --   if (SKC4_LOGGER ~= nil and type(SKC4_LOGGER) == "table") then
  --     SKC4_LOGGER:error("Variable", strName, "not found")
  --   end
  -- end
end

function DeleteVariable(strName)
  if (strName  ~= nil) then
    return C4:DeleteVariable(strName)
  else
    if (SKC4_LOGGER ~= nil and type(SKC4_LOGGER) == "table") then
      SKC4_LOGGER:error("No variable name!")
    end
  end

  -- local variable_id = VARIABLE_ID_MAP[strName]
  -- if (variable_id  ~= nil) then
  --   VARIABLE_ID_MAP[strName] = nil
  --   return C4:DeleteVariable(variable_id)
  -- else
  --   if (SKC4_LOGGER ~= nil and type(SKC4_LOGGER) == "table") then
  --     SKC4_LOGGER:error("Variable", strName, "not found")
  --   end
  -- end
end


----------------------------------------------------
-- Conditionals
----------------------------------------------------

function TestCondition(strName, tParams)
	if (strName ~= nil) then
		if (SKC4_LOGGER ~= nil and type(SKC4_LOGGER) == "table") then
      SKC4_LOGGER:info("TestCondition()\name:",strName,"\ntParams", tParams)
    end

    -- Remove any spaces (trim the property)
    local trimmedName = string.gsub(strName, " ", "_")
    local status = true
    local retVal = ""
  
    if (SKC4_CONDITIONALS[strName] ~= nil and type(SKC4_CONDITIONALS[strName]) == "function") then
      status, retVal = pcall(SKC4_CONDITIONALS[strName], tParams)
    elseif (SKC4_CONDITIONALS[trimmedName] ~= nil and type(SKC4_CONDITIONALS[trimmedName]) == "function") then
      status, retVal = pcall(SKC4_CONDITIONALS[trimmedName], tParams)
    end

    if (CONDITIONALS[strName] ~= nil and type(CONDITIONALS[strName]) == "function") then
      status, retVal = pcall(CONDITIONALS[strName], tParams)
    elseif (CONDITIONALS[trimmedName] ~= nil and type(CONDITIONALS[trimmedName]) == "function") then
      status, retVal = pcall(CONDITIONALS[trimmedName], tParams)
    end
  
    if (not status) then
      if (SKC4_LOGGER ~= nil and type(SKC4_LOGGER) == "table") then
        SKC4_LOGGER:error("LUA_ERROR: ", err)
      end
    else
      return retVal
    end

	end
end


----------------------------------------------------
-- Driver info
----------------------------------------------------

function SKC4_ON_DRIVER_LATE_INIT.init_driver_version()
  local current_version = C4:GetDriverConfigInfo("version")
  UpdateProperty("Driver Version", current_version)
  SKC4_LOGGER:info("Updating Driver Version prop to", current_version)
end
----------------------------------------------------
-- Logging
----------------------------------------------------
function SKC4_ON_DRIVER_DESTROYED.destroy_timer_disable_log()
  if TIMER_DISABLE_LOG_INTERVAL then
    TIMER_DISABLE_LOG_INTERVAL:stop()
  end
end

function SKC4_ON_PROPERTY_CHANGED.Log_Mode(sValue)
  LOGGER:debug("SKC4_ON_PROPERTY_CHANGED.Log_Mode: sValue = ",sValue)
  if sValue == "Print" then -- Only print
    LOGGER:disableC4FileLogging()
  else -- otherwise
    LOGGER:enableC4FileLogging()
  end
end

function SKC4_ON_PROPERTY_CHANGED.Log_Level(sValue)
  
  start_timer = true
  if sValue == "0 - Alert" then 
    LOGGER:enableFatalLevel()
  elseif sValue == "1 - Error" then 
    LOGGER:enableErrorLevel()
  elseif sValue == "2 - Warning" then 
    LOGGER:enableWarningLevel()
  elseif sValue == "3 - Info" then 
    LOGGER:enableInfoLevel()
  elseif sValue == "4 - Trace" then 
    LOGGER:enableTraceLevel()
  elseif sValue == "5 - Debug" then 
    LOGGER:enableDebugLevel()
  else
    LOGGER:disableLogging()
    start_timer = false
  end

  if start_timer then
    minutes = getDisableLogIntervalValueInMinutes()
    updateTimerDisableLogInterval(minutes)
  end

  LOGGER:debug("SKC4_ON_PROPERTY_CHANGED.Log_Level: sValue = ",sValue)
end

function SKC4_ON_PROPERTY_CHANGED.Disable_Log_Interval(sValue)
  LOGGER:debug("SKC4_ON_PROPERTY_CHANGED.Disable_Log_Interval: sValue = ",sValue)

  minutes = getDisableLogIntervalValueInMinutes(sValue)
  updateTimerDisableLogInterval(minutes)
end

function onTimerDisableLogIntervalTimerExpire()
  LOGGER:debug("onTimerDisableLogIntervalTimerExpire(): disable log now")
  
  LOGGER:disableLogging()
  UpdateProperty(SKC4_PROPERTY_LOG_LEVEL,"Off")
end

function updateTimerDisableLogInterval(minutes)
  if TIMER_DISABLE_LOG_INTERVAL then
    TIMER_DISABLE_LOG_INTERVAL:stop()
  end
  
  if minutes then
    TIMER_DISABLE_LOG_INTERVAL = TimerManager:new(minutes, "MINUTES", onTimerDisableLogIntervalTimerExpire, false)
    TIMER_DISABLE_LOG_INTERVAL:start()
  end
end

function getDisableLogIntervalValueInMinutes(label)
  sValue = label or Properties[SKC4_PROPERTY_DISABLE_LOG_INTERVAL]
  minutes = 0
  if ( sValue ~= nil) then
    if sValue == "15 minutes" then
      minutes = 15
    elseif sValue == "30 minutes" then
      minutes = 30
    elseif sValue == "1 hour" then
      minutes = 60
    elseif sValue == "6 hours" then
      minutes = 360
    elseif sValue == "24 hours" then
      minutes = 1440
    end
  end
  return minutes
end

 end)
local ApiRestManager = require "SKC4.ApiRestManager"
local TimerManager = require "SKC4.TimerManager"
require 'SKC4.LicenseManager'
require "SKC4.DriverCore";
local Logger = require "SKC4.Logger"
local Utility = require "SKC4.Utility"
--LOGGER = Logger:new()

--- Config License Manager
LICENSE_MGR:setParamValue("ProductId", XXX, "DRIVERCENTRAL") -- Product ID
LICENSE_MGR:setParamValue("FreeDriver", false, "DRIVERCENTRAL") -- (Driver is not a free driver)
LICENSE_MGR:setParamValue("FileName", "shelly_dimmer2.c4z", "DRIVERCENTRAL")
LICENSE_MGR:setParamValue("LicenseCode", "Put here your licence", "SOFTKIWI")
--------------------------------------------
-- REMOVE THIS TO ENABLE LICENCE MANAGEMENT 
LICENSE_MGR:isLicenseActive = function ()
  return true
end
LICENSE_MGR:isLicenseTrial = function ()
  return 1
end
--------------------------------------------



--Globals
TIMER_FOR_POLLING = nil
TIMER_INTERVAL_FOR_POLLING = 10
TIMER_INTERVAL_SCALE_FOR_POLLING = "SECONDS"

PROPRETY_SHELLY_IP = "Shelly IP"
PROPRETY_SHELLY_USER = "Shelly Username (reserved login)"
PROPRETY_SHELLY_PWD = "Shelly Password (reserved login)"
PROPRETY_LAST_UPDATE_AT = "Last Update At"
PROPERTY_POLLING_INTERVAL = "Polling Interval"

PROPERTY_SHELLY_MODE = "Shelly Mode"
-- PROPERTY_SHELLY_MODE_ON_OFF = "On/Off/Stop"
-- PROPERTY_SHELLY_MODE_POSITION = "Position"

VARIABLE_NAME_STATE = "SHELLY_STATE"
VARIABLE_NAME_POWER = "SHELLY_POWER"
VARIABLE_NAME_IS_VALID = "SHELLY_IS_VALID"
VARIABLE_NAME_SAFETY_SWITCH = "SHELLY_SAFETY_SWITCH"
VARIABLE_NAME_OVERTEMPERATURE = "SHELLY_OVERTEMPERATURE"
VARIABLE_NAME_STOP_REASON = "SHELLY_STOP_REASON"
-- VARIABLE_NAME_LAST_DIRECTION = "SHELLY_LAST_DIRECTION"
-- VARIABLE_NAME_CURRENT_POS = "SHELLY_CURRENT_POS"
VARIABLE_NAME_CALIBRATING = "SHELLY_CALIBRATING"
VARIABLE_NAME_POSITIONING = "SHELLY_POSITIONING"

PROXY_BIND_ID = 5001  --BLIND
API_MANAGER = {}
REDBINDID = 541
GREENBINDID = 542
BLUEBINDID = 543
C4:AddDynamicBinding(REDBINDID, "CONTROL", true, "RED CH", "shelly_dimmer2",false, false) 
C4:AddDynamicBinding(GREENBINDID, "CONTROL", true, "GREEN CH", "shelly_dimmer2",false, false) 
C4:AddDynamicBinding(BLUEBINDID, "CONTROL", true, "BLUE CH", "shelly_dimmer2",false, false) 

DIMMER_SETTING = PersistData.DIMMER_SETTING or {}
-- SHELLY_DIMMER = {}
DIMMER_SETTING.LAST_LEVEL = 0
PersistData.DIMMER_SETTING = DIMMER_SETTING


function ON_DRIVER_EARLY_INIT.init_api_manager()
  LOGGER:debug("ON_DRIVER_EARLY_INIT.init_api_manager()")
  API_MANAGER = ApiRestManager:new()
  API_MANAGER:set_max_concurrent_requests(1)
  API_MANAGER:set_delayed_requests_interval(100)
  API_MANAGER:enable_delayed_requests()
  API_MANAGER:define_template("status", "get", "/status/",           done_callback_status)
  API_MANAGER:define_template("set_brightness", "get", "/light/0",           done_callback_set) --http://192.168.1.37/light/0?turn=off&brightness=50
  API_MANAGER:define_template("set_preset", "get", "/light/0",           done_callback_preset) --http://192.168.1.37/light/0?turn=off&brightness=50
end

function ON_DRIVER_EARLY_INIT.init_blind_data()
  LOGGER:debug("ON_DRIVER_EARLY_INIT.init_blind_data()")
 
end

function ON_DRIVER_LATE_INIT.init_variables()
  -- AddVariable(VARIABLE_NAME_STATE, gBlind.last_response_state, "STRING", true, false)
  -- AddVariable(VARIABLE_NAME_POWER, gBlind.last_response_power, "NUMBER", true, false)
  -- AddVariable(VARIABLE_NAME_IS_VALID, gBlind.last_response_is_valid, "BOOL", true, false)
  -- AddVariable(VARIABLE_NAME_SAFETY_SWITCH, gBlind.last_response_safety_switch, "BOOL", true, false)
  -- AddVariable(VARIABLE_NAME_OVERTEMPERATURE, gBlind.last_response_overtemperature, "BOOL", true, false)
  -- AddVariable(VARIABLE_NAME_STOP_REASON, gBlind.last_response_stop_reason, "STRING", true, false)
  -- AddVariable(VARIABLE_NAME_LAST_DIRECTION, gBlind.last_response_last_direction, "STRING", true, false)
  -- AddVariable(VARIABLE_NAME_CURRENT_POS, gBlind.last_response_current_pos, "NUMBER", true, false)
  -- AddVariable(VARIABLE_NAME_CALIBRATING, gBlind.last_response_calibrating, "BOOL", true, false)
  -- AddVariable(VARIABLE_NAME_POSITIONING, gBlind.last_response_positioning, "BOOL", true, false)
end

function ON_DRIVER_LATEINIT.update_timer_for_polling()
  LOGGER:debug("ON_DRIVER_LATEINIT.update_timer_for_polling()")
  updateTimerForPolling(TIMER_FOR_POLLING)
end

function ON_DRIVER_DESTROYED.destroy_timer()
  if (TIMER_FOR_POLLING) then
    LOGGER:debug("OnDriverDestroyed","Stopping polling timer")
    destroyTimerForPolling()
  end
end

function ON_DRIVER_LATE_INIT.init_ui()
  -- LOGGER:debug("ON_DRIVER_LATE_INIT.init_ui()")
  -- update_ui()
end


-------------------------
--- Properties
-------------------------
function ON_PROPERTY_CHANGED.Polling_Interval(sValue)
	LOGGER:debug("ON_PROPERTY_CHANGED.Polling_Interval: sValue = ",sValue)
	local value = tonumber(sValue)
	if value == nil then
	  TIMER_INTERVAL_FOR_POLLING = 10
	else
	  TIMER_INTERVAL_FOR_POLLING = value
  end
  
	LOGGER:debug("ON_PROPERTY_CHANGED.Polling_Interval: TIMER_FOR_POLLING = ",TIMER_FOR_POLLING)

	updateTimerForPolling(TIMER_INTERVAL_FOR_POLLING)
end


ON_PROPERTY_CHANGED[PROPRETY_SHELLY_IP] = function(value)
  LOGGER:debug("ON_PROPERTY_CHANGED", PROPRETY_SHELLY_IP,value)
  if (value) then
    API_MANAGER:set_base_url(value)
  end
end

ON_PROPERTY_CHANGED[PROPRETY_SHELLY_USER] = function(value)
  if (value == nil or value == "") then
    API_MANAGER:disable_authentication()
  else
    API_MANAGER:set_username(value)
    API_MANAGER:enable_basic_authentication()
  end
end
ON_PROPERTY_CHANGED[PROPRETY_SHELLY_PWD] = function(value)
  if (value) then
    API_MANAGER:set_password(value)
  end
end

ON_PROPERTY_CHANGED[PROPERTY_SHELLY_MODE] = function(value)
  if (value) then
    if (value == PROPERTY_SHELLY_MODE_ON_OFF) then
      set_drive_in_on_off_mode()
    elseif (value == PROPERTY_SHELLY_MODE_POSITION) then
      set_drive_in_position_mode()
    end
  end
end

-------------------------
--- ProxyCommands
-------------------------
function PROXY_COMMANDS.RAMP_TO_LEVEL (tParams, idBinding)
  if (not LICENSE_MGR:isAbleToWork()) then 
    return
  end

	LOGGER:debug("PROXY_COMMANDS.RAMP_TO_LEVEL: ",tParams, idBinding)
  local brightness = tonumber(tParams["LEVEL"])
  local data = {}
  if brightness == 0 then
    data.turn = "off"
  else
    data.turn = "on"
    data.brightness = brightness
  end  
  API_MANAGER:add_request_by_template("set_brightness", {}, data)
  DIMMER_SETTING.LAST_LEVEL = brightness
  API_MANAGER:send_next_requests()
end

function PROXY_COMMANDS.BUTTON_ACTION (tParams, idBinding)
  if (not LICENSE_MGR:isAbleToWork()) then 
    return
  end

	LOGGER:debug("PROXY_COMMANDS.BUTTON_ACTION: ",tParams, idBinding)
  
  local BUTTON_ID = tonumber(tParams.BUTTON_ID)
  local ACTION = tonumber(tParams.ACTION) 

  LOGGER:debug("PROXY_COMMANDS.BUTTON_ACTION: ",type(ACTION), ACTION == 2)
  if ACTION == 2 then 
    local data = {}
    if DIMMER_SETTING.LAST_LEVEL > 0 then
      DIMMER_SETTING.LAST_LEVEL = 0
      data.turn = "off"
    else
      DIMMER_SETTING.LAST_LEVEL = DIMMER_SETTING.PRESET or 0
      data.turn = "on"
      data.brightness = DIMMER_SETTING.LAST_LEVEL
    end 
    API_MANAGER:add_request_by_template("set_preset", {}, data)
    API_MANAGER:send_next_requests()
  end
end

function PROXY_COMMANDS.SET_PRESET_LEVEL (tParams, idBinding)
	LOGGER:debug("PROXY_COMMANDS.SET_PRESET_LEVEL: ",tParams, idBinding)
  DIMMER_SETTING.PRESET = tonumber(tParams.LEVEL)
end
function PROXY_COMMANDS.SET_CLICK_RATE_UP (tParams, idBinding)
	LOGGER:debug("PROXY_COMMANDS.SET_CLICK_RATE_UP: ",tParams, idBinding)
  DIMMER_SETTING.CLICK_RATE_UP = tonumber(tParams.RATE)
end
function PROXY_COMMANDS.SET_CLICK_RATE_DOWN (tParams, idBinding)
	LOGGER:debug("PROXY_COMMANDS.SET_CLICK_RATE_DOWN: ",tParams, idBinding)
  DIMMER_SETTING.CLICK_RATE_DOWN = tonumber(tParams.RATE)
end
function PROXY_COMMANDS.SET_HOLD_RATE_UP (tParams, idBinding)
	LOGGER:debug("PROXY_COMMANDS.SET_HOLD_RATE_UP: ",tParams, idBinding)
  DIMMER_SETTING.HOLD_RATE_UP = tonumber(tParams.RATE)
end
function PROXY_COMMANDS.SET_HOLD_RATE_DOWN (tParams, idBinding)
	LOGGER:debug("PROXY_COMMANDS.SET_HOLD_RATE_DOWN: ",tParams, idBinding)
  DIMMER_SETTING.HOLD_RATE_DOWN = tonumber(tParams.RATE)
end
function PROXY_COMMANDS.SET_BUTTON_COLOR (tParams, idBinding)
	LOGGER:debug("PROXY_COMMANDS.SET_BUTTON_COLOR: ",tParams, idBinding)
  local BUTTON_ID = tParams.BUTTON_ID
  if DIMMER_SETTING.BUTTON == nil then DIMMER_SETTING.BUTTON = {} end
  if DIMMER_SETTING.BUTTON[BUTTON_ID] == nil then DIMMER_SETTING.BUTTON[BUTTON_ID] = {} end

  DIMMER_SETTING.BUTTON[BUTTON_ID].OFF_COLOR = tParams.OFF_COLOR or DIMMER_SETTING.BUTTON[BUTTON_ID].OFF_COLOR
  DIMMER_SETTING.BUTTON[BUTTON_ID].ON_COLOR = tParams.ON_COLOR or DIMMER_SETTING.BUTTON[BUTTON_ID].ON_COLOR
end

-- function PROXY_COMMANDS.SET_LEVEL_TARGET(tParams, idBinding)
--   if (not LICENSE_MGR:isAbleToWork()) then 
--     return
--   end
-- 
--   local level_target = Utility.tonumber_loc (tParams.LEVEL_TARGET)
--     
--   if (gBlind.level_discrete) then --slider
--     gBlind.target_level = level_target
--     
--     C4:SendToProxy (PROXY_BIND_ID, 'MOVING', {LEVEL_TARGET = level_target, RAMP_RATE = gBlind.ramp_rate}, "NOTIFY", true)
--     gBlind.target_state = "LEVEL_TARGET"
--     API_MANAGER:add_request_by_template("to_pos", {}, {
--       go = "to_pos",
--       roller_pos = level_target
--     })
--     API_MANAGER:add_request_by_template("status")
--     API_MANAGER:send_next_requests()
--   else
--     if (level_target == gBlind.level_open) then
--       C4:SendToProxy (PROXY_BIND_ID, 'MOVING', {LEVEL_TARGET = gBlind.level_open}, "NOTIFY", true)			
--       gBlind.target_level = gBlind.level_open
--       gBlind.target_state = "OPENED"
--       API_MANAGER:add_request_by_template("fopen")
--     elseif (level_target == gBlind.level_closed) then
--       C4:SendToProxy (PROXY_BIND_ID, 'MOVING', {LEVEL_TARGET = gBlind.level_closed}, "NOTIFY", true)
--       gBlind.target_level = gBlind.level_closed
--       gBlind.target_state = "CLOSED"
--       API_MANAGER:add_request_by_template("fclose")    
--     end
--     API_MANAGER:send_next_requests()
--   end
-- end

-- function PROXY_COMMANDS.UP(tParams, idBinding)
--   if (not LICENSE_MGR:isAbleToWork()) then 
--     return
--   end
-- 
--   C4:SendToProxy (PROXY_BIND_ID, 'MOVING', {LEVEL_TARGET = gBlind.level_open}, "NOTIFY", true)			
--   gBlind.target_level = gBlind.level_open
--   gBlind.target_state = "OPENED"
--   API_MANAGER:add_request_by_template("fopen")
--   API_MANAGER:send_next_requests()
-- end
-- function PROXY_COMMANDS.DOWN(tParams, idBinding)
--   if (not LICENSE_MGR:isAbleToWork()) then 
--     return
--   end
-- 
--   C4:SendToProxy (PROXY_BIND_ID, 'MOVING', {LEVEL_TARGET = gBlind.level_closed}, "NOTIFY", true)
--   gBlind.target_level = gBlind.level_closed
--   gBlind.target_state = "CLOSED"
--   API_MANAGER:add_request_by_template("fclose")
--   API_MANAGER:send_next_requests()
-- end
-- function PROXY_COMMANDS.STOP(tParams, idBinding)
--   if (not LICENSE_MGR:isAbleToWork()) then 
--     return
--   end
-- 
--   C4:SendToProxy (PROXY_BIND_ID, 'MOVING', {LEVEL_TARGET = -1}, "NOTIFY", true)
--   gBlind.target_level = -1
--   gBlind.target_state = "STOPPED"
--   API_MANAGER:add_request_by_template("stop")
--   API_MANAGER:send_next_requests()
-- end
-- 
-- -- function PROXY_COMMANDS.TOGGLE(tParams, idBinding)
-- --   if (not LICENSE_MGR:isAbleToWork()) then 
-- --     return
-- --   end
-- -- 
-- --   if ( gBlind.last_direction == "close") then
-- --     C4:SendToProxy (PROXY_BIND_ID, 'MOVING', {LEVEL_TARGET = gBlind.level_open}, "NOTIFY", true)			
-- --     gBlind.target_level = gBlind.level_open
-- --     API_MANAGER:add_request_by_template("fopen")
-- --     API_MANAGER:send_next_requests()
-- --   end
-- --   if ( gBlind.last_direction == "open") then
-- --     C4:SendToProxy (PROXY_BIND_ID, 'MOVING', {LEVEL_TARGET = gBlind.level_closed}, "NOTIFY", true)
-- --     gBlind.target_level = gBlind.level_closed
-- --     API_MANAGER:add_request_by_template("fclose")
-- --     API_MANAGER:send_next_requests()
-- --   end
-- -- end
-- 
-- -------------------------
-- --- ReceivedAsync
-- -------------------------
-- 
-- function updateDeviceMode(value)
--   local old_mode = Properties[PROPERTY_SHELLY_MODE]
--   local new_mode = PROPERTY_SHELLY_MODE_ON_OFF
--   if (value == true) then
--     new_mode = PROPERTY_SHELLY_MODE_POSITION
--   end
-- 
--   if (new_mode ~= old_mode) then
--     if (new_mode == PROPERTY_SHELLY_MODE_ON_OFF) then
--       set_drive_in_on_off_mode()
--     elseif (new_mode == PROPERTY_SHELLY_MODE_POSITION) then
--       set_drive_in_position_mode()
--     end
--     UpdateProperty(PROPERTY_SHELLY_MODE, new_mode)
--   end
-- end

-- 

function parseStatus(tRes)
    LOGGER:debug("parseStatus()")

    --print (Utility.tstring(tRes))
    local STATUS = {}
    STATUS.brightness = tonumber(tRes['lights'][1]['brightness']) or 0
    if tRes['lights'][1]['ison'] == true then STATUS.ison = 1 else STATUS.ison = 0 end
    return STATUS
end
function send_feedback_to_interface(level, ison)
  LOGGER:debug("send_feedback_to_interface("..level..", "..ison..")")

  local parsed_level = level
  if ison == 0 then parsed_level = 0 end
  C4:SendToProxy (PROXY_BIND_ID, "LIGHT_LEVEL", parsed_level) 
end

function done_callback_status(transfer, responses, errCode, errMsg)
   if (errCode == 0) then
     local lresp = responses[#responses]
     LOGGER:debug("done_callback_status(): transfer succeeded (", #responses, " responses received), last response code: " .. lresp.code)
    -- se mi interessa il corpo della risposta uso lresp.body
    -- LOGGER:debug("done_callback_status(): body of last response:", lresp.body)
      
    local status = parseStatus(C4:JsonDecode(lresp.body))
    send_feedback_to_interface(status.brightness, status.ison)
    -- print (brightness)
    

  else
    if (errCode == -1) then
      LOGGER:debug("done_callback_status(): transfer was aborted")
    else
      LOGGER:debug("done_callback_status(): transfer failed with error", errCode,":",errMsg, "(", #responses,"responses completed)")  
    end
  end  
end

function done_callback_set(transfer, responses, errCode, errMsg)
  if (errCode == 0) then
    local lresp = responses[#responses]
    LOGGER:debug("done_callback_set(): transfer succeeded (", #responses, " responses received), last response code: " .. lresp.code)
   -- se mi interessa il corpo della risposta uso lresp.body     
   API_MANAGER:add_request_by_template("status")
   API_MANAGER:send_next_requests()
 else
   if (errCode == -1) then
     LOGGER:debug("done_callback_set(): transfer was aborted")
   else
     LOGGER:debug("done_callback_set(): transfer failed with error", errCode,":",errMsg, "(", #responses,"responses completed)")  
   end
 end  
end
function done_callback_preset(transfer, responses, errCode, errMsg)
  if (errCode == 0) then
    local lresp = responses[#responses]
    LOGGER:debug("done_callback_preset(): transfer succeeded (", #responses, " responses received), last response code: " .. lresp.code)
   -- se mi interessa il corpo della risposta uso lresp.body     
   API_MANAGER:add_request_by_template("status")
   API_MANAGER:send_next_requests()
 else
   if (errCode == -1) then
     LOGGER:debug("done_callback_preset(): transfer was aborted")
   else
     LOGGER:debug("done_callback_preset(): transfer failed with error", errCode,":",errMsg, "(", #responses,"responses completed)")  
   end
 end  
end

--function update_on_off_ui(state)
--   LOGGER:debug("state, target_state:", state, gBlind.target_state)
--   if state == "stop" then 
--     if gBlind.target_state == "OPENED" then -- parte da C4
--       C4:SendToProxy (PROXY_BIND_ID, 'STOPPED', {LEVEL = 100}, "NOTIFY", true) 
--       LOGGER:debug("DICO CHE SIAMO APERTI")
--       --C4:SendToProxy (PROXY_BIND_ID, 'Up', {}, "NOTIFY", true) 
--       
--     elseif gBlind.target_state == "CLOSED" then 
--       C4:SendToProxy (PROXY_BIND_ID, 'STOPPED', {LEVEL = 0}, "NOTIFY", true)
--       LOGGER:debug("DICO CHE SIAMO CHIUSI")
--       --C4:SendToProxy (PROXY_BIND_ID, 'Down', {}, "NOTIFY", true) 
--       
--     elseif gBlind.target_state == "STOPPED" then 
--       C4:SendToProxy (PROXY_BIND_ID, 'STOPPED', {LEVEL = 50}, "NOTIFY", true)
--       LOGGER:debug("DICO CHE SIAMO A META'")
--       --C4:SendToProxy (PROXY_BIND_ID, 'Stop', {}, "NOTIFY", true) 
--       
--     end
--     gBlind.target_state = "" -- target state raggiunto e quindi vuoto in attesa di nuovo valore
--   else
--     LOGGER:debug("DICO CHE MI STO MUOVENDO A META'")
--     if gBlind.target_state == ""  then -- se ricevo movimento dallo shelly
--       if (state == "open") then
--         C4:SendToProxy (PROXY_BIND_ID, 'MOVING', {LEVEL_TARGET = 100}, "NOTIFY", true)
--         gBlind.target_state="OPENED"
--       elseif (state == "close")	then
--         C4:SendToProxy (PROXY_BIND_ID, 'MOVING', {LEVEL_TARGET = 0}, "NOTIFY", true)			
--         gBlind.target_state="CLOSED"
--       else
--         C4:SendToProxy (PROXY_BIND_ID, 'STOPPED', {LEVEL = 50}, "NOTIFY", true)
--       end
--     end
--   end
-- end
-- 
-- 
-- function update_slider_ui(state, current_pos)
--   LOGGER:debug("state, current_pos, gBlind", state, current_pos, gBlind)
--   if state == "stop" then
--     --if (gBlind.target_state == "LEVEL_TARGET") then -- level_target != da "" se la rishiesta parte da C4
--     --if (gBlind.target_state ~= "") then  
--       if (current_pos >= gBlind.level_open) then
--         C4:SendToProxy (PROXY_BIND_ID, 'STOPPED', {LEVEL =  gBlind.level_open}, "NOTIFY", true) 
--       elseif (current_pos <= gBlind.level_closed) then
--         C4:SendToProxy (PROXY_BIND_ID, 'STOPPED', {LEVEL =  gBlind.level_closed}, "NOTIFY", true) 
--       else
--         C4:SendToProxy (PROXY_BIND_ID, 'STOPPED', {LEVEL =  current_pos}, "NOTIFY", true) 
--       end
--       gBlind.target_state = ""
--     --end
--   else
--      
--     if (gBlind.target_state == "") then -- se la richiesta parte da shelly
--       C4:SendToProxy (PROXY_BIND_ID, 'MOVING', {LEVEL_TARGET = current_pos}, "NOTIFY", true)
--       gBlind.target_state = "LEVEL_TARGET"
--     end
--   end
-- end
-- 
-- -------------------------
-- --- Managing Protocol and Requests
-- -------------------------
-- 

--   
--   if (tRes) then
--                                         
--     gBlind.last_response_state = tRes["state"]
--     gBlind.last_response_power = tRes["power"]
--     gBlind.last_response_is_valid = tRes["is_valid"]
--     gBlind.last_response_safety_switch = tRes["safety_switch"]
--     gBlind.last_response_overtemperature = tRes["overtemperature"]
--     gBlind.last_response_stop_reason = tRes["stop_reason"]
--     gBlind.last_response_last_direction = tRes["last_direction"]
--     gBlind.last_response_current_pos = Utility.tonumber_loc(tRes["current_pos"])
--     gBlind.last_response_calibrating = tRes["calibrating"]
--     gBlind.last_response_positioning = tRes["positioning"]
--     
--     updateStatusVariables()
--   else
--     gBlind.last_response_state = nil
--     gBlind.last_response_power = nil
--     gBlind.last_response_is_valid = nil
--     gBlind.last_response_safety_switch = nil
--     gBlind.last_response_overtemperature = nil
--     gBlind.last_response_stop_reason = nil
--     gBlind.last_response_last_direction = nil
--     gBlind.last_response_current_pos = nil
--     gBlind.last_response_calibrating = nil
--     gBlind.last_response_positioning = nil
--   end
-- 	return gBlind
-- end
-- 
-- -------------------------
-- --- VARIABLES 
-- -------------------------
-- 
-- function updateStatusVariables()
--     SetVariable(VARIABLE_NAME_STATE,            gBlind.last_response_state)
--     SetVariable(VARIABLE_NAME_POWER,            gBlind.last_response_power)
--     SetVariable(VARIABLE_NAME_IS_VALID,         gBlind.last_response_is_valid)
--     SetVariable(VARIABLE_NAME_SAFETY_SWITCH,    gBlind.last_response_safety_switch)
--     SetVariable(VARIABLE_NAME_OVERTEMPERATURE,  gBlind.last_response_overtemperature)
--     SetVariable(VARIABLE_NAME_STOP_REASON,      gBlind.last_response_stop_reason)
--     SetVariable(VARIABLE_NAME_LAST_DIRECTION,   gBlind.last_response_last_direction)
--     SetVariable(VARIABLE_NAME_CURRENT_POS,      gBlind.last_response_current_pos)
--     SetVariable(VARIABLE_NAME_CALIBRATING,      gBlind.last_response_calibrating)
--     SetVariable(VARIABLE_NAME_POSITIONING,      gBlind.last_response_positioning)
-- end
-- -------------------------
-- --- TIMER for POLLING
-- -------------------------
-- 
function updateTimerForPolling(new_interval)
	if (TIMER_FOR_POLLING == nil) then
	  LOGGER:debug("updateTimerForPolling NEW")
	  TIMER_FOR_POLLING = TimerManager:new(TIMER_INTERVAL_FOR_POLLING, TIMER_INTERVAL_SCALE_FOR_POLLING, onTimerExpireForPolling, true)
	else
	  LOGGER:debug("updateTimerForPolling UPDATE")
	  TIMER_FOR_POLLING:stop()
	  TIMER_FOR_POLLING = TimerManager:new(TIMER_INTERVAL_FOR_POLLING, TIMER_INTERVAL_SCALE_FOR_POLLING, onTimerExpireForPolling, true)
	end
	LOGGER:debug("updateTimerForPolling START")
	TIMER_FOR_POLLING:start()
	LOGGER:debug("TIMER_FOR_POLLING:", TIMER_FOR_POLLING)
end

function destroyTimerForPolling()
	TIMER_FOR_POLLING:stop()
end

function onTimerExpireForPolling()
  LOGGER:debug("onTimerExpireForPolling()")
	
  API_MANAGER:add_request_by_template("status")
  API_MANAGER:send_next_requests()
end
-- 
-- 
-- -------------------------------
-- -- Other functions
-- -------------------------------
-- 
-- function set_drive_in_on_off_mode() 
--   gBlind.level_discrete = false
--   gBlind.has_level = true
--   update_ui()
-- end
-- 
-- function set_drive_in_position_mode()
--   gBlind.level_discrete = true
--   gBlind.has_level = true
--   update_ui()
-- end
-- 
-- function is_drive_in_on_off_mode()
--   return gBlind.level_discrete == false and gBlind.has_level == false
-- end
-- 
-- function update_ui()
--   LOGGER:debug("update_ui()")
--   C4:SendToProxy (PROXY_BIND_ID, "SET_CAN_STOP", 
--       { CAN_STOP = gBlind.can_stop },
--     "NOTIFY", true)
--   C4:SendToProxy (PROXY_BIND_ID, "SET_HAS_LEVEL", 
--       { HAS_LEVEL=gBlind.has_level,
--       LEVEL_OPEN=gBlind.level_open,
--       LEVEL_CLOSED=gBlind.level_closed,
--       --LEVEL_SECONDARY_CLOSED=gBlind.level_closed_secondary,
--       LEVEL_UNKNOWN=gBlind.level_unknown,
--       LEVEL_DISCRETE_CONTROL=gBlind.level_discrete,
--       HAS_LEVEL_SECONDARY_CLOSED=gBlind.hasSecondaryClosed}, 
--     "NOTIFY", true)
-- end
-- 